
dht22_without_lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004294  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004424  08004424  00005424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800449c  0800449c  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  0800449c  0800449c  0000549c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044a4  080044a4  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044a4  080044a4  000054a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044a8  080044a8  000054a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080044ac  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000605c  2**0
                  CONTENTS
 10 .bss          0000022c  2000005c  2000005c  0000605c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000288  20000288  0000605c  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b7dc  00000000  00000000  00006086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aff  00000000  00000000  00011862  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd8  00000000  00000000  00013368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a0e  00000000  00000000  00014040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000212b1  00000000  00000000  00014a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eaa1  00000000  00000000  00035cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb54e  00000000  00000000  000447a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010fcee  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d44  00000000  00000000  0010fd34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  00113a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800440c 	.word	0x0800440c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800440c 	.word	0x0800440c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_frsub>:
 80005f8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80005fc:	e002      	b.n	8000604 <__addsf3>
 80005fe:	bf00      	nop

08000600 <__aeabi_fsub>:
 8000600:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000604 <__addsf3>:
 8000604:	0042      	lsls	r2, r0, #1
 8000606:	bf1f      	itttt	ne
 8000608:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800060c:	ea92 0f03 	teqne	r2, r3
 8000610:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000614:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000618:	d06a      	beq.n	80006f0 <__addsf3+0xec>
 800061a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800061e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000622:	bfc1      	itttt	gt
 8000624:	18d2      	addgt	r2, r2, r3
 8000626:	4041      	eorgt	r1, r0
 8000628:	4048      	eorgt	r0, r1
 800062a:	4041      	eorgt	r1, r0
 800062c:	bfb8      	it	lt
 800062e:	425b      	neglt	r3, r3
 8000630:	2b19      	cmp	r3, #25
 8000632:	bf88      	it	hi
 8000634:	4770      	bxhi	lr
 8000636:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800063a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800063e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000642:	bf18      	it	ne
 8000644:	4240      	negne	r0, r0
 8000646:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800064a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800064e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000652:	bf18      	it	ne
 8000654:	4249      	negne	r1, r1
 8000656:	ea92 0f03 	teq	r2, r3
 800065a:	d03f      	beq.n	80006dc <__addsf3+0xd8>
 800065c:	f1a2 0201 	sub.w	r2, r2, #1
 8000660:	fa41 fc03 	asr.w	ip, r1, r3
 8000664:	eb10 000c 	adds.w	r0, r0, ip
 8000668:	f1c3 0320 	rsb	r3, r3, #32
 800066c:	fa01 f103 	lsl.w	r1, r1, r3
 8000670:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000674:	d502      	bpl.n	800067c <__addsf3+0x78>
 8000676:	4249      	negs	r1, r1
 8000678:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800067c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000680:	d313      	bcc.n	80006aa <__addsf3+0xa6>
 8000682:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000686:	d306      	bcc.n	8000696 <__addsf3+0x92>
 8000688:	0840      	lsrs	r0, r0, #1
 800068a:	ea4f 0131 	mov.w	r1, r1, rrx
 800068e:	f102 0201 	add.w	r2, r2, #1
 8000692:	2afe      	cmp	r2, #254	@ 0xfe
 8000694:	d251      	bcs.n	800073a <__addsf3+0x136>
 8000696:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800069a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800069e:	bf08      	it	eq
 80006a0:	f020 0001 	biceq.w	r0, r0, #1
 80006a4:	ea40 0003 	orr.w	r0, r0, r3
 80006a8:	4770      	bx	lr
 80006aa:	0049      	lsls	r1, r1, #1
 80006ac:	eb40 0000 	adc.w	r0, r0, r0
 80006b0:	3a01      	subs	r2, #1
 80006b2:	bf28      	it	cs
 80006b4:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80006b8:	d2ed      	bcs.n	8000696 <__addsf3+0x92>
 80006ba:	fab0 fc80 	clz	ip, r0
 80006be:	f1ac 0c08 	sub.w	ip, ip, #8
 80006c2:	ebb2 020c 	subs.w	r2, r2, ip
 80006c6:	fa00 f00c 	lsl.w	r0, r0, ip
 80006ca:	bfaa      	itet	ge
 80006cc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80006d0:	4252      	neglt	r2, r2
 80006d2:	4318      	orrge	r0, r3
 80006d4:	bfbc      	itt	lt
 80006d6:	40d0      	lsrlt	r0, r2
 80006d8:	4318      	orrlt	r0, r3
 80006da:	4770      	bx	lr
 80006dc:	f092 0f00 	teq	r2, #0
 80006e0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80006e4:	bf06      	itte	eq
 80006e6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80006ea:	3201      	addeq	r2, #1
 80006ec:	3b01      	subne	r3, #1
 80006ee:	e7b5      	b.n	800065c <__addsf3+0x58>
 80006f0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80006f4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80006f8:	bf18      	it	ne
 80006fa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80006fe:	d021      	beq.n	8000744 <__addsf3+0x140>
 8000700:	ea92 0f03 	teq	r2, r3
 8000704:	d004      	beq.n	8000710 <__addsf3+0x10c>
 8000706:	f092 0f00 	teq	r2, #0
 800070a:	bf08      	it	eq
 800070c:	4608      	moveq	r0, r1
 800070e:	4770      	bx	lr
 8000710:	ea90 0f01 	teq	r0, r1
 8000714:	bf1c      	itt	ne
 8000716:	2000      	movne	r0, #0
 8000718:	4770      	bxne	lr
 800071a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800071e:	d104      	bne.n	800072a <__addsf3+0x126>
 8000720:	0040      	lsls	r0, r0, #1
 8000722:	bf28      	it	cs
 8000724:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000728:	4770      	bx	lr
 800072a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800072e:	bf3c      	itt	cc
 8000730:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000734:	4770      	bxcc	lr
 8000736:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800073a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 800073e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000742:	4770      	bx	lr
 8000744:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000748:	bf16      	itet	ne
 800074a:	4608      	movne	r0, r1
 800074c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000750:	4601      	movne	r1, r0
 8000752:	0242      	lsls	r2, r0, #9
 8000754:	bf06      	itte	eq
 8000756:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800075a:	ea90 0f01 	teqeq	r0, r1
 800075e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000762:	4770      	bx	lr

08000764 <__aeabi_ui2f>:
 8000764:	f04f 0300 	mov.w	r3, #0
 8000768:	e004      	b.n	8000774 <__aeabi_i2f+0x8>
 800076a:	bf00      	nop

0800076c <__aeabi_i2f>:
 800076c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000770:	bf48      	it	mi
 8000772:	4240      	negmi	r0, r0
 8000774:	ea5f 0c00 	movs.w	ip, r0
 8000778:	bf08      	it	eq
 800077a:	4770      	bxeq	lr
 800077c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000780:	4601      	mov	r1, r0
 8000782:	f04f 0000 	mov.w	r0, #0
 8000786:	e01c      	b.n	80007c2 <__aeabi_l2f+0x2a>

08000788 <__aeabi_ul2f>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	f04f 0300 	mov.w	r3, #0
 8000794:	e00a      	b.n	80007ac <__aeabi_l2f+0x14>
 8000796:	bf00      	nop

08000798 <__aeabi_l2f>:
 8000798:	ea50 0201 	orrs.w	r2, r0, r1
 800079c:	bf08      	it	eq
 800079e:	4770      	bxeq	lr
 80007a0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80007a4:	d502      	bpl.n	80007ac <__aeabi_l2f+0x14>
 80007a6:	4240      	negs	r0, r0
 80007a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007ac:	ea5f 0c01 	movs.w	ip, r1
 80007b0:	bf02      	ittt	eq
 80007b2:	4684      	moveq	ip, r0
 80007b4:	4601      	moveq	r1, r0
 80007b6:	2000      	moveq	r0, #0
 80007b8:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 80007bc:	bf08      	it	eq
 80007be:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 80007c2:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 80007c6:	fabc f28c 	clz	r2, ip
 80007ca:	3a08      	subs	r2, #8
 80007cc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80007d0:	db10      	blt.n	80007f4 <__aeabi_l2f+0x5c>
 80007d2:	fa01 fc02 	lsl.w	ip, r1, r2
 80007d6:	4463      	add	r3, ip
 80007d8:	fa00 fc02 	lsl.w	ip, r0, r2
 80007dc:	f1c2 0220 	rsb	r2, r2, #32
 80007e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80007e4:	fa20 f202 	lsr.w	r2, r0, r2
 80007e8:	eb43 0002 	adc.w	r0, r3, r2
 80007ec:	bf08      	it	eq
 80007ee:	f020 0001 	biceq.w	r0, r0, #1
 80007f2:	4770      	bx	lr
 80007f4:	f102 0220 	add.w	r2, r2, #32
 80007f8:	fa01 fc02 	lsl.w	ip, r1, r2
 80007fc:	f1c2 0220 	rsb	r2, r2, #32
 8000800:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000804:	fa21 f202 	lsr.w	r2, r1, r2
 8000808:	eb43 0002 	adc.w	r0, r3, r2
 800080c:	bf08      	it	eq
 800080e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000812:	4770      	bx	lr

08000814 <__aeabi_fmul>:
 8000814:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000818:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 800081c:	bf1e      	ittt	ne
 800081e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000822:	ea92 0f0c 	teqne	r2, ip
 8000826:	ea93 0f0c 	teqne	r3, ip
 800082a:	d06f      	beq.n	800090c <__aeabi_fmul+0xf8>
 800082c:	441a      	add	r2, r3
 800082e:	ea80 0c01 	eor.w	ip, r0, r1
 8000832:	0240      	lsls	r0, r0, #9
 8000834:	bf18      	it	ne
 8000836:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800083a:	d01e      	beq.n	800087a <__aeabi_fmul+0x66>
 800083c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000840:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000844:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000848:	fba0 3101 	umull	r3, r1, r0, r1
 800084c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000850:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000854:	bf3e      	ittt	cc
 8000856:	0049      	lslcc	r1, r1, #1
 8000858:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 800085c:	005b      	lslcc	r3, r3, #1
 800085e:	ea40 0001 	orr.w	r0, r0, r1
 8000862:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000866:	2afd      	cmp	r2, #253	@ 0xfd
 8000868:	d81d      	bhi.n	80008a6 <__aeabi_fmul+0x92>
 800086a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800086e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000872:	bf08      	it	eq
 8000874:	f020 0001 	biceq.w	r0, r0, #1
 8000878:	4770      	bx	lr
 800087a:	f090 0f00 	teq	r0, #0
 800087e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000882:	bf08      	it	eq
 8000884:	0249      	lsleq	r1, r1, #9
 8000886:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800088a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800088e:	3a7f      	subs	r2, #127	@ 0x7f
 8000890:	bfc2      	ittt	gt
 8000892:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000896:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800089a:	4770      	bxgt	lr
 800089c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80008a0:	f04f 0300 	mov.w	r3, #0
 80008a4:	3a01      	subs	r2, #1
 80008a6:	dc5d      	bgt.n	8000964 <__aeabi_fmul+0x150>
 80008a8:	f112 0f19 	cmn.w	r2, #25
 80008ac:	bfdc      	itt	le
 80008ae:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80008b2:	4770      	bxle	lr
 80008b4:	f1c2 0200 	rsb	r2, r2, #0
 80008b8:	0041      	lsls	r1, r0, #1
 80008ba:	fa21 f102 	lsr.w	r1, r1, r2
 80008be:	f1c2 0220 	rsb	r2, r2, #32
 80008c2:	fa00 fc02 	lsl.w	ip, r0, r2
 80008c6:	ea5f 0031 	movs.w	r0, r1, rrx
 80008ca:	f140 0000 	adc.w	r0, r0, #0
 80008ce:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008d2:	bf08      	it	eq
 80008d4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008d8:	4770      	bx	lr
 80008da:	f092 0f00 	teq	r2, #0
 80008de:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 80008e2:	bf02      	ittt	eq
 80008e4:	0040      	lsleq	r0, r0, #1
 80008e6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 80008ea:	3a01      	subeq	r2, #1
 80008ec:	d0f9      	beq.n	80008e2 <__aeabi_fmul+0xce>
 80008ee:	ea40 000c 	orr.w	r0, r0, ip
 80008f2:	f093 0f00 	teq	r3, #0
 80008f6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008fa:	bf02      	ittt	eq
 80008fc:	0049      	lsleq	r1, r1, #1
 80008fe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000902:	3b01      	subeq	r3, #1
 8000904:	d0f9      	beq.n	80008fa <__aeabi_fmul+0xe6>
 8000906:	ea41 010c 	orr.w	r1, r1, ip
 800090a:	e78f      	b.n	800082c <__aeabi_fmul+0x18>
 800090c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000910:	ea92 0f0c 	teq	r2, ip
 8000914:	bf18      	it	ne
 8000916:	ea93 0f0c 	teqne	r3, ip
 800091a:	d00a      	beq.n	8000932 <__aeabi_fmul+0x11e>
 800091c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000920:	bf18      	it	ne
 8000922:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000926:	d1d8      	bne.n	80008da <__aeabi_fmul+0xc6>
 8000928:	ea80 0001 	eor.w	r0, r0, r1
 800092c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000930:	4770      	bx	lr
 8000932:	f090 0f00 	teq	r0, #0
 8000936:	bf17      	itett	ne
 8000938:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 800093c:	4608      	moveq	r0, r1
 800093e:	f091 0f00 	teqne	r1, #0
 8000942:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000946:	d014      	beq.n	8000972 <__aeabi_fmul+0x15e>
 8000948:	ea92 0f0c 	teq	r2, ip
 800094c:	d101      	bne.n	8000952 <__aeabi_fmul+0x13e>
 800094e:	0242      	lsls	r2, r0, #9
 8000950:	d10f      	bne.n	8000972 <__aeabi_fmul+0x15e>
 8000952:	ea93 0f0c 	teq	r3, ip
 8000956:	d103      	bne.n	8000960 <__aeabi_fmul+0x14c>
 8000958:	024b      	lsls	r3, r1, #9
 800095a:	bf18      	it	ne
 800095c:	4608      	movne	r0, r1
 800095e:	d108      	bne.n	8000972 <__aeabi_fmul+0x15e>
 8000960:	ea80 0001 	eor.w	r0, r0, r1
 8000964:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000968:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800096c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000970:	4770      	bx	lr
 8000972:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bx	lr

0800097c <__aeabi_fdiv>:
 800097c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000980:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000984:	bf1e      	ittt	ne
 8000986:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800098a:	ea92 0f0c 	teqne	r2, ip
 800098e:	ea93 0f0c 	teqne	r3, ip
 8000992:	d069      	beq.n	8000a68 <__aeabi_fdiv+0xec>
 8000994:	eba2 0203 	sub.w	r2, r2, r3
 8000998:	ea80 0c01 	eor.w	ip, r0, r1
 800099c:	0249      	lsls	r1, r1, #9
 800099e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80009a2:	d037      	beq.n	8000a14 <__aeabi_fdiv+0x98>
 80009a4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80009a8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009ac:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009b0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80009b4:	428b      	cmp	r3, r1
 80009b6:	bf38      	it	cc
 80009b8:	005b      	lslcc	r3, r3, #1
 80009ba:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 80009be:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 80009c2:	428b      	cmp	r3, r1
 80009c4:	bf24      	itt	cs
 80009c6:	1a5b      	subcs	r3, r3, r1
 80009c8:	ea40 000c 	orrcs.w	r0, r0, ip
 80009cc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009d0:	bf24      	itt	cs
 80009d2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009d6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009da:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009de:	bf24      	itt	cs
 80009e0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009e8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009ec:	bf24      	itt	cs
 80009ee:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009f2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009f6:	011b      	lsls	r3, r3, #4
 80009f8:	bf18      	it	ne
 80009fa:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009fe:	d1e0      	bne.n	80009c2 <__aeabi_fdiv+0x46>
 8000a00:	2afd      	cmp	r2, #253	@ 0xfd
 8000a02:	f63f af50 	bhi.w	80008a6 <__aeabi_fmul+0x92>
 8000a06:	428b      	cmp	r3, r1
 8000a08:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a0c:	bf08      	it	eq
 8000a0e:	f020 0001 	biceq.w	r0, r0, #1
 8000a12:	4770      	bx	lr
 8000a14:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a18:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a1c:	327f      	adds	r2, #127	@ 0x7f
 8000a1e:	bfc2      	ittt	gt
 8000a20:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a24:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a28:	4770      	bxgt	lr
 8000a2a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a2e:	f04f 0300 	mov.w	r3, #0
 8000a32:	3a01      	subs	r2, #1
 8000a34:	e737      	b.n	80008a6 <__aeabi_fmul+0x92>
 8000a36:	f092 0f00 	teq	r2, #0
 8000a3a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000a3e:	bf02      	ittt	eq
 8000a40:	0040      	lsleq	r0, r0, #1
 8000a42:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000a46:	3a01      	subeq	r2, #1
 8000a48:	d0f9      	beq.n	8000a3e <__aeabi_fdiv+0xc2>
 8000a4a:	ea40 000c 	orr.w	r0, r0, ip
 8000a4e:	f093 0f00 	teq	r3, #0
 8000a52:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a56:	bf02      	ittt	eq
 8000a58:	0049      	lsleq	r1, r1, #1
 8000a5a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000a5e:	3b01      	subeq	r3, #1
 8000a60:	d0f9      	beq.n	8000a56 <__aeabi_fdiv+0xda>
 8000a62:	ea41 010c 	orr.w	r1, r1, ip
 8000a66:	e795      	b.n	8000994 <__aeabi_fdiv+0x18>
 8000a68:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a6c:	ea92 0f0c 	teq	r2, ip
 8000a70:	d108      	bne.n	8000a84 <__aeabi_fdiv+0x108>
 8000a72:	0242      	lsls	r2, r0, #9
 8000a74:	f47f af7d 	bne.w	8000972 <__aeabi_fmul+0x15e>
 8000a78:	ea93 0f0c 	teq	r3, ip
 8000a7c:	f47f af70 	bne.w	8000960 <__aeabi_fmul+0x14c>
 8000a80:	4608      	mov	r0, r1
 8000a82:	e776      	b.n	8000972 <__aeabi_fmul+0x15e>
 8000a84:	ea93 0f0c 	teq	r3, ip
 8000a88:	d104      	bne.n	8000a94 <__aeabi_fdiv+0x118>
 8000a8a:	024b      	lsls	r3, r1, #9
 8000a8c:	f43f af4c 	beq.w	8000928 <__aeabi_fmul+0x114>
 8000a90:	4608      	mov	r0, r1
 8000a92:	e76e      	b.n	8000972 <__aeabi_fmul+0x15e>
 8000a94:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000a98:	bf18      	it	ne
 8000a9a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000a9e:	d1ca      	bne.n	8000a36 <__aeabi_fdiv+0xba>
 8000aa0:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000aa4:	f47f af5c 	bne.w	8000960 <__aeabi_fmul+0x14c>
 8000aa8:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000aac:	f47f af3c 	bne.w	8000928 <__aeabi_fmul+0x114>
 8000ab0:	e75f      	b.n	8000972 <__aeabi_fmul+0x15e>
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_f2iz>:
 8000ab4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ab8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000abc:	d30f      	bcc.n	8000ade <__aeabi_f2iz+0x2a>
 8000abe:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000ac2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_f2iz+0x30>
 8000ac8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000acc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ad4:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad8:	bf18      	it	ne
 8000ada:	4240      	negne	r0, r0
 8000adc:	4770      	bx	lr
 8000ade:	f04f 0000 	mov.w	r0, #0
 8000ae2:	4770      	bx	lr
 8000ae4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000ae8:	d101      	bne.n	8000aee <__aeabi_f2iz+0x3a>
 8000aea:	0242      	lsls	r2, r0, #9
 8000aec:	d105      	bne.n	8000afa <__aeabi_f2iz+0x46>
 8000aee:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000af2:	bf08      	it	eq
 8000af4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af8:	4770      	bx	lr
 8000afa:	f04f 0000 	mov.w	r0, #0
 8000afe:	4770      	bx	lr

08000b00 <__aeabi_uldivmod>:
 8000b00:	b953      	cbnz	r3, 8000b18 <__aeabi_uldivmod+0x18>
 8000b02:	b94a      	cbnz	r2, 8000b18 <__aeabi_uldivmod+0x18>
 8000b04:	2900      	cmp	r1, #0
 8000b06:	bf08      	it	eq
 8000b08:	2800      	cmpeq	r0, #0
 8000b0a:	bf1c      	itt	ne
 8000b0c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b10:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b14:	f000 b96a 	b.w	8000dec <__aeabi_idiv0>
 8000b18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b20:	f000 f806 	bl	8000b30 <__udivmoddi4>
 8000b24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b2c:	b004      	add	sp, #16
 8000b2e:	4770      	bx	lr

08000b30 <__udivmoddi4>:
 8000b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b34:	9d08      	ldr	r5, [sp, #32]
 8000b36:	460c      	mov	r4, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14e      	bne.n	8000bda <__udivmoddi4+0xaa>
 8000b3c:	4694      	mov	ip, r2
 8000b3e:	458c      	cmp	ip, r1
 8000b40:	4686      	mov	lr, r0
 8000b42:	fab2 f282 	clz	r2, r2
 8000b46:	d962      	bls.n	8000c0e <__udivmoddi4+0xde>
 8000b48:	b14a      	cbz	r2, 8000b5e <__udivmoddi4+0x2e>
 8000b4a:	f1c2 0320 	rsb	r3, r2, #32
 8000b4e:	4091      	lsls	r1, r2
 8000b50:	fa20 f303 	lsr.w	r3, r0, r3
 8000b54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b58:	4319      	orrs	r1, r3
 8000b5a:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b62:	fa1f f68c 	uxth.w	r6, ip
 8000b66:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b6e:	fb07 1114 	mls	r1, r7, r4, r1
 8000b72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b76:	fb04 f106 	mul.w	r1, r4, r6
 8000b7a:	4299      	cmp	r1, r3
 8000b7c:	d90a      	bls.n	8000b94 <__udivmoddi4+0x64>
 8000b7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b82:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b86:	f080 8112 	bcs.w	8000dae <__udivmoddi4+0x27e>
 8000b8a:	4299      	cmp	r1, r3
 8000b8c:	f240 810f 	bls.w	8000dae <__udivmoddi4+0x27e>
 8000b90:	3c02      	subs	r4, #2
 8000b92:	4463      	add	r3, ip
 8000b94:	1a59      	subs	r1, r3, r1
 8000b96:	fa1f f38e 	uxth.w	r3, lr
 8000b9a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b9e:	fb07 1110 	mls	r1, r7, r0, r1
 8000ba2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba6:	fb00 f606 	mul.w	r6, r0, r6
 8000baa:	429e      	cmp	r6, r3
 8000bac:	d90a      	bls.n	8000bc4 <__udivmoddi4+0x94>
 8000bae:	eb1c 0303 	adds.w	r3, ip, r3
 8000bb2:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000bb6:	f080 80fc 	bcs.w	8000db2 <__udivmoddi4+0x282>
 8000bba:	429e      	cmp	r6, r3
 8000bbc:	f240 80f9 	bls.w	8000db2 <__udivmoddi4+0x282>
 8000bc0:	4463      	add	r3, ip
 8000bc2:	3802      	subs	r0, #2
 8000bc4:	1b9b      	subs	r3, r3, r6
 8000bc6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bca:	2100      	movs	r1, #0
 8000bcc:	b11d      	cbz	r5, 8000bd6 <__udivmoddi4+0xa6>
 8000bce:	40d3      	lsrs	r3, r2
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bda:	428b      	cmp	r3, r1
 8000bdc:	d905      	bls.n	8000bea <__udivmoddi4+0xba>
 8000bde:	b10d      	cbz	r5, 8000be4 <__udivmoddi4+0xb4>
 8000be0:	e9c5 0100 	strd	r0, r1, [r5]
 8000be4:	2100      	movs	r1, #0
 8000be6:	4608      	mov	r0, r1
 8000be8:	e7f5      	b.n	8000bd6 <__udivmoddi4+0xa6>
 8000bea:	fab3 f183 	clz	r1, r3
 8000bee:	2900      	cmp	r1, #0
 8000bf0:	d146      	bne.n	8000c80 <__udivmoddi4+0x150>
 8000bf2:	42a3      	cmp	r3, r4
 8000bf4:	d302      	bcc.n	8000bfc <__udivmoddi4+0xcc>
 8000bf6:	4290      	cmp	r0, r2
 8000bf8:	f0c0 80f0 	bcc.w	8000ddc <__udivmoddi4+0x2ac>
 8000bfc:	1a86      	subs	r6, r0, r2
 8000bfe:	eb64 0303 	sbc.w	r3, r4, r3
 8000c02:	2001      	movs	r0, #1
 8000c04:	2d00      	cmp	r5, #0
 8000c06:	d0e6      	beq.n	8000bd6 <__udivmoddi4+0xa6>
 8000c08:	e9c5 6300 	strd	r6, r3, [r5]
 8000c0c:	e7e3      	b.n	8000bd6 <__udivmoddi4+0xa6>
 8000c0e:	2a00      	cmp	r2, #0
 8000c10:	f040 8090 	bne.w	8000d34 <__udivmoddi4+0x204>
 8000c14:	eba1 040c 	sub.w	r4, r1, ip
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	fa1f f78c 	uxth.w	r7, ip
 8000c20:	2101      	movs	r1, #1
 8000c22:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c2a:	fb08 4416 	mls	r4, r8, r6, r4
 8000c2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c32:	fb07 f006 	mul.w	r0, r7, r6
 8000c36:	4298      	cmp	r0, r3
 8000c38:	d908      	bls.n	8000c4c <__udivmoddi4+0x11c>
 8000c3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c42:	d202      	bcs.n	8000c4a <__udivmoddi4+0x11a>
 8000c44:	4298      	cmp	r0, r3
 8000c46:	f200 80cd 	bhi.w	8000de4 <__udivmoddi4+0x2b4>
 8000c4a:	4626      	mov	r6, r4
 8000c4c:	1a1c      	subs	r4, r3, r0
 8000c4e:	fa1f f38e 	uxth.w	r3, lr
 8000c52:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c56:	fb08 4410 	mls	r4, r8, r0, r4
 8000c5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5e:	fb00 f707 	mul.w	r7, r0, r7
 8000c62:	429f      	cmp	r7, r3
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x148>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x146>
 8000c70:	429f      	cmp	r7, r3
 8000c72:	f200 80b0 	bhi.w	8000dd6 <__udivmoddi4+0x2a6>
 8000c76:	4620      	mov	r0, r4
 8000c78:	1bdb      	subs	r3, r3, r7
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	e7a5      	b.n	8000bcc <__udivmoddi4+0x9c>
 8000c80:	f1c1 0620 	rsb	r6, r1, #32
 8000c84:	408b      	lsls	r3, r1
 8000c86:	fa22 f706 	lsr.w	r7, r2, r6
 8000c8a:	431f      	orrs	r7, r3
 8000c8c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c90:	fa04 f301 	lsl.w	r3, r4, r1
 8000c94:	ea43 030c 	orr.w	r3, r3, ip
 8000c98:	40f4      	lsrs	r4, r6
 8000c9a:	fa00 f801 	lsl.w	r8, r0, r1
 8000c9e:	0c38      	lsrs	r0, r7, #16
 8000ca0:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ca4:	fbb4 fef0 	udiv	lr, r4, r0
 8000ca8:	fa1f fc87 	uxth.w	ip, r7
 8000cac:	fb00 441e 	mls	r4, r0, lr, r4
 8000cb0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb4:	fb0e f90c 	mul.w	r9, lr, ip
 8000cb8:	45a1      	cmp	r9, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	d90a      	bls.n	8000cd6 <__udivmoddi4+0x1a6>
 8000cc0:	193c      	adds	r4, r7, r4
 8000cc2:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000cc6:	f080 8084 	bcs.w	8000dd2 <__udivmoddi4+0x2a2>
 8000cca:	45a1      	cmp	r9, r4
 8000ccc:	f240 8081 	bls.w	8000dd2 <__udivmoddi4+0x2a2>
 8000cd0:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cd4:	443c      	add	r4, r7
 8000cd6:	eba4 0409 	sub.w	r4, r4, r9
 8000cda:	fa1f f983 	uxth.w	r9, r3
 8000cde:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ce2:	fb00 4413 	mls	r4, r0, r3, r4
 8000ce6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cea:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cee:	45a4      	cmp	ip, r4
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x1d2>
 8000cf2:	193c      	adds	r4, r7, r4
 8000cf4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000cf8:	d267      	bcs.n	8000dca <__udivmoddi4+0x29a>
 8000cfa:	45a4      	cmp	ip, r4
 8000cfc:	d965      	bls.n	8000dca <__udivmoddi4+0x29a>
 8000cfe:	3b02      	subs	r3, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d06:	fba0 9302 	umull	r9, r3, r0, r2
 8000d0a:	eba4 040c 	sub.w	r4, r4, ip
 8000d0e:	429c      	cmp	r4, r3
 8000d10:	46ce      	mov	lr, r9
 8000d12:	469c      	mov	ip, r3
 8000d14:	d351      	bcc.n	8000dba <__udivmoddi4+0x28a>
 8000d16:	d04e      	beq.n	8000db6 <__udivmoddi4+0x286>
 8000d18:	b155      	cbz	r5, 8000d30 <__udivmoddi4+0x200>
 8000d1a:	ebb8 030e 	subs.w	r3, r8, lr
 8000d1e:	eb64 040c 	sbc.w	r4, r4, ip
 8000d22:	fa04 f606 	lsl.w	r6, r4, r6
 8000d26:	40cb      	lsrs	r3, r1
 8000d28:	431e      	orrs	r6, r3
 8000d2a:	40cc      	lsrs	r4, r1
 8000d2c:	e9c5 6400 	strd	r6, r4, [r5]
 8000d30:	2100      	movs	r1, #0
 8000d32:	e750      	b.n	8000bd6 <__udivmoddi4+0xa6>
 8000d34:	f1c2 0320 	rsb	r3, r2, #32
 8000d38:	fa20 f103 	lsr.w	r1, r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	fa24 f303 	lsr.w	r3, r4, r3
 8000d44:	4094      	lsls	r4, r2
 8000d46:	430c      	orrs	r4, r1
 8000d48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d4c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d50:	fa1f f78c 	uxth.w	r7, ip
 8000d54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d58:	fb08 3110 	mls	r1, r8, r0, r3
 8000d5c:	0c23      	lsrs	r3, r4, #16
 8000d5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d62:	fb00 f107 	mul.w	r1, r0, r7
 8000d66:	4299      	cmp	r1, r3
 8000d68:	d908      	bls.n	8000d7c <__udivmoddi4+0x24c>
 8000d6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d72:	d22c      	bcs.n	8000dce <__udivmoddi4+0x29e>
 8000d74:	4299      	cmp	r1, r3
 8000d76:	d92a      	bls.n	8000dce <__udivmoddi4+0x29e>
 8000d78:	3802      	subs	r0, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1a5b      	subs	r3, r3, r1
 8000d7e:	b2a4      	uxth	r4, r4
 8000d80:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d84:	fb08 3311 	mls	r3, r8, r1, r3
 8000d88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d8c:	fb01 f307 	mul.w	r3, r1, r7
 8000d90:	42a3      	cmp	r3, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x276>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d9c:	d213      	bcs.n	8000dc6 <__udivmoddi4+0x296>
 8000d9e:	42a3      	cmp	r3, r4
 8000da0:	d911      	bls.n	8000dc6 <__udivmoddi4+0x296>
 8000da2:	3902      	subs	r1, #2
 8000da4:	4464      	add	r4, ip
 8000da6:	1ae4      	subs	r4, r4, r3
 8000da8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dac:	e739      	b.n	8000c22 <__udivmoddi4+0xf2>
 8000dae:	4604      	mov	r4, r0
 8000db0:	e6f0      	b.n	8000b94 <__udivmoddi4+0x64>
 8000db2:	4608      	mov	r0, r1
 8000db4:	e706      	b.n	8000bc4 <__udivmoddi4+0x94>
 8000db6:	45c8      	cmp	r8, r9
 8000db8:	d2ae      	bcs.n	8000d18 <__udivmoddi4+0x1e8>
 8000dba:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dbe:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dc2:	3801      	subs	r0, #1
 8000dc4:	e7a8      	b.n	8000d18 <__udivmoddi4+0x1e8>
 8000dc6:	4631      	mov	r1, r6
 8000dc8:	e7ed      	b.n	8000da6 <__udivmoddi4+0x276>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	e799      	b.n	8000d02 <__udivmoddi4+0x1d2>
 8000dce:	4630      	mov	r0, r6
 8000dd0:	e7d4      	b.n	8000d7c <__udivmoddi4+0x24c>
 8000dd2:	46d6      	mov	lr, sl
 8000dd4:	e77f      	b.n	8000cd6 <__udivmoddi4+0x1a6>
 8000dd6:	4463      	add	r3, ip
 8000dd8:	3802      	subs	r0, #2
 8000dda:	e74d      	b.n	8000c78 <__udivmoddi4+0x148>
 8000ddc:	4606      	mov	r6, r0
 8000dde:	4623      	mov	r3, r4
 8000de0:	4608      	mov	r0, r1
 8000de2:	e70f      	b.n	8000c04 <__udivmoddi4+0xd4>
 8000de4:	3e02      	subs	r6, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	e730      	b.n	8000c4c <__udivmoddi4+0x11c>
 8000dea:	bf00      	nop

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <lcd16x2_i2c_sendCommand>:
#define LCD_I2C_SLAVE_ADDRESS_0  0x4E
#define LCD_I2C_SLAVE_ADDRESS_1  0x7E

/* Private functions */
static void lcd16x2_i2c_sendCommand(uint8_t command)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af02      	add	r7, sp, #8
 8000df6:	4603      	mov	r3, r0
 8000df8:	71fb      	strb	r3, [r7, #7]
  const uint8_t command_0_3 = (0xF0 & (command<<4));
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	011b      	lsls	r3, r3, #4
 8000dfe:	73fb      	strb	r3, [r7, #15]
  const uint8_t command_4_7 = (0xF0 & command);
 8000e00:	79fb      	ldrb	r3, [r7, #7]
 8000e02:	f023 030f 	bic.w	r3, r3, #15
 8000e06:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000e08:	7bbb      	ldrb	r3, [r7, #14]
 8000e0a:	f043 030c 	orr.w	r3, r3, #12
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	723b      	strb	r3, [r7, #8]
 8000e12:	7bbb      	ldrb	r3, [r7, #14]
 8000e14:	f043 0308 	orr.w	r3, r3, #8
 8000e18:	b2db      	uxtb	r3, r3
 8000e1a:	727b      	strb	r3, [r7, #9]
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
 8000e1e:	f043 030c 	orr.w	r3, r3, #12
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	72bb      	strb	r3, [r7, #10]
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	f043 0308 	orr.w	r3, r3, #8
 8000e2c:	b2db      	uxtb	r3, r3
 8000e2e:	72fb      	strb	r3, [r7, #11]
      command_4_7 | LCD_EN | LCD_BK_LIGHT,
      command_4_7 | LCD_BK_LIGHT,
      command_0_3 | LCD_EN | LCD_BK_LIGHT,
      command_0_3 | LCD_BK_LIGHT,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000e30:	4b07      	ldr	r3, [pc, #28]	@ (8000e50 <lcd16x2_i2c_sendCommand+0x60>)
 8000e32:	6818      	ldr	r0, [r3, #0]
 8000e34:	4b07      	ldr	r3, [pc, #28]	@ (8000e54 <lcd16x2_i2c_sendCommand+0x64>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f107 0208 	add.w	r2, r7, #8
 8000e3e:	23c8      	movs	r3, #200	@ 0xc8
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	2304      	movs	r3, #4
 8000e44:	f001 f9dc 	bl	8002200 <HAL_I2C_Master_Transmit>
}
 8000e48:	bf00      	nop
 8000e4a:	3710      	adds	r7, #16
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000078 	.word	0x20000078
 8000e54:	2000007c 	.word	0x2000007c

08000e58 <lcd16x2_i2c_sendData>:

static void lcd16x2_i2c_sendData(uint8_t data)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b086      	sub	sp, #24
 8000e5c:	af02      	add	r7, sp, #8
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  const uint8_t data_0_3 = (0xF0 & (data<<4));
 8000e62:	79fb      	ldrb	r3, [r7, #7]
 8000e64:	011b      	lsls	r3, r3, #4
 8000e66:	73fb      	strb	r3, [r7, #15]
  const uint8_t data_4_7 = (0xF0 & data);
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f023 030f 	bic.w	r3, r3, #15
 8000e6e:	73bb      	strb	r3, [r7, #14]
  uint8_t i2cData[4] =
 8000e70:	7bbb      	ldrb	r3, [r7, #14]
 8000e72:	f043 030d 	orr.w	r3, r3, #13
 8000e76:	b2db      	uxtb	r3, r3
 8000e78:	723b      	strb	r3, [r7, #8]
 8000e7a:	7bbb      	ldrb	r3, [r7, #14]
 8000e7c:	f043 0309 	orr.w	r3, r3, #9
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	727b      	strb	r3, [r7, #9]
 8000e84:	7bfb      	ldrb	r3, [r7, #15]
 8000e86:	f043 030d 	orr.w	r3, r3, #13
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	72bb      	strb	r3, [r7, #10]
 8000e8e:	7bfb      	ldrb	r3, [r7, #15]
 8000e90:	f043 0309 	orr.w	r3, r3, #9
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	72fb      	strb	r3, [r7, #11]
      data_4_7 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_4_7 | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_EN | LCD_BK_LIGHT | LCD_RS,
      data_0_3 | LCD_BK_LIGHT | LCD_RS,
  };
  HAL_I2C_Master_Transmit(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS, i2cData, 4, 200);
 8000e98:	4b07      	ldr	r3, [pc, #28]	@ (8000eb8 <lcd16x2_i2c_sendData+0x60>)
 8000e9a:	6818      	ldr	r0, [r3, #0]
 8000e9c:	4b07      	ldr	r3, [pc, #28]	@ (8000ebc <lcd16x2_i2c_sendData+0x64>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	f107 0208 	add.w	r2, r7, #8
 8000ea6:	23c8      	movs	r3, #200	@ 0xc8
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	2304      	movs	r3, #4
 8000eac:	f001 f9a8 	bl	8002200 <HAL_I2C_Master_Transmit>
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000078 	.word	0x20000078
 8000ebc:	2000007c 	.word	0x2000007c

08000ec0 <lcd16x2_i2c_init>:
/**
 * @brief Initialise LCD16x2
 * @param[in] *pI2cHandle - pointer to HAL I2C handle
 */
bool lcd16x2_i2c_init(I2C_HandleTypeDef *pI2cHandle)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  HAL_Delay(50);
 8000ec8:	2032      	movs	r0, #50	@ 0x32
 8000eca:	f000 fd83 	bl	80019d4 <HAL_Delay>
  lcd16x2_i2cHandle = pI2cHandle;
 8000ece:	4a30      	ldr	r2, [pc, #192]	@ (8000f90 <lcd16x2_i2c_init+0xd0>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6013      	str	r3, [r2, #0]
  if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_0, 5, 500) != HAL_OK)
 8000ed4:	4b2e      	ldr	r3, [pc, #184]	@ (8000f90 <lcd16x2_i2c_init+0xd0>)
 8000ed6:	6818      	ldr	r0, [r3, #0]
 8000ed8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000edc:	2205      	movs	r2, #5
 8000ede:	214e      	movs	r1, #78	@ 0x4e
 8000ee0:	f001 fa8c 	bl	80023fc <HAL_I2C_IsDeviceReady>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d010      	beq.n	8000f0c <lcd16x2_i2c_init+0x4c>
  {
    if(HAL_I2C_IsDeviceReady(lcd16x2_i2cHandle, LCD_I2C_SLAVE_ADDRESS_1, 5, 500) != HAL_OK)
 8000eea:	4b29      	ldr	r3, [pc, #164]	@ (8000f90 <lcd16x2_i2c_init+0xd0>)
 8000eec:	6818      	ldr	r0, [r3, #0]
 8000eee:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ef2:	2205      	movs	r2, #5
 8000ef4:	217e      	movs	r1, #126	@ 0x7e
 8000ef6:	f001 fa81 	bl	80023fc <HAL_I2C_IsDeviceReady>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <lcd16x2_i2c_init+0x44>
    {
      return false;
 8000f00:	2300      	movs	r3, #0
 8000f02:	e040      	b.n	8000f86 <lcd16x2_i2c_init+0xc6>
    }
    else
    {
      LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_1;
 8000f04:	4b23      	ldr	r3, [pc, #140]	@ (8000f94 <lcd16x2_i2c_init+0xd4>)
 8000f06:	227e      	movs	r2, #126	@ 0x7e
 8000f08:	701a      	strb	r2, [r3, #0]
 8000f0a:	e002      	b.n	8000f12 <lcd16x2_i2c_init+0x52>
    }
  }
  else
  {
    LCD_I2C_SLAVE_ADDRESS = LCD_I2C_SLAVE_ADDRESS_0;
 8000f0c:	4b21      	ldr	r3, [pc, #132]	@ (8000f94 <lcd16x2_i2c_init+0xd4>)
 8000f0e:	224e      	movs	r2, #78	@ 0x4e
 8000f10:	701a      	strb	r2, [r3, #0]
  }
  //Initialise LCD for 4-bit operation
  //1. Wait at least 15ms
  HAL_Delay(45);
 8000f12:	202d      	movs	r0, #45	@ 0x2d
 8000f14:	f000 fd5e 	bl	80019d4 <HAL_Delay>
  //2. Attentions sequence
  lcd16x2_i2c_sendCommand(0x30);
 8000f18:	2030      	movs	r0, #48	@ 0x30
 8000f1a:	f7ff ff69 	bl	8000df0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(5);
 8000f1e:	2005      	movs	r0, #5
 8000f20:	f000 fd58 	bl	80019d4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000f24:	2030      	movs	r0, #48	@ 0x30
 8000f26:	f7ff ff63 	bl	8000df0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f000 fd52 	bl	80019d4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x30);
 8000f30:	2030      	movs	r0, #48	@ 0x30
 8000f32:	f7ff ff5d 	bl	8000df0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8000f36:	2008      	movs	r0, #8
 8000f38:	f000 fd4c 	bl	80019d4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x20);
 8000f3c:	2020      	movs	r0, #32
 8000f3e:	f7ff ff57 	bl	8000df0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(8);
 8000f42:	2008      	movs	r0, #8
 8000f44:	f000 fd46 	bl	80019d4 <HAL_Delay>

  lcd16x2_i2c_sendCommand(LCD_FUNCTIONSET | LCD_FUNCTION_N);
 8000f48:	2028      	movs	r0, #40	@ 0x28
 8000f4a:	f7ff ff51 	bl	8000df0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f000 fd40 	bl	80019d4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL);
 8000f54:	2008      	movs	r0, #8
 8000f56:	f7ff ff4b 	bl	8000df0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000f5a:	2001      	movs	r0, #1
 8000f5c:	f000 fd3a 	bl	80019d4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_CLEARDISPLAY);
 8000f60:	2001      	movs	r0, #1
 8000f62:	f7ff ff45 	bl	8000df0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000f66:	2003      	movs	r0, #3
 8000f68:	f000 fd34 	bl	80019d4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(0x04 | LCD_ENTRY_ID);
 8000f6c:	2006      	movs	r0, #6
 8000f6e:	f7ff ff3f 	bl	8000df0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(1);
 8000f72:	2001      	movs	r0, #1
 8000f74:	f000 fd2e 	bl	80019d4 <HAL_Delay>
  lcd16x2_i2c_sendCommand(LCD_DISPLAYCONTROL | LCD_DISPLAY_D);
 8000f78:	200c      	movs	r0, #12
 8000f7a:	f7ff ff39 	bl	8000df0 <lcd16x2_i2c_sendCommand>
  HAL_Delay(3);
 8000f7e:	2003      	movs	r0, #3
 8000f80:	f000 fd28 	bl	80019d4 <HAL_Delay>

  return true;
 8000f84:	2301      	movs	r3, #1
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20000078 	.word	0x20000078
 8000f94:	2000007c 	.word	0x2000007c

08000f98 <lcd16x2_i2c_setCursor>:
 * @brief Set cursor position
 * @param[in] row - 0 or 1 for line1 or line2
 * @param[in] col - 0 - 15 (16 columns LCD)
 */
void lcd16x2_i2c_setCursor(uint8_t row, uint8_t col)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	460a      	mov	r2, r1
 8000fa2:	71fb      	strb	r3, [r7, #7]
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	71bb      	strb	r3, [r7, #6]
  uint8_t maskData;
  maskData = (col)&0x0F;
 8000fa8:	79bb      	ldrb	r3, [r7, #6]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	73fb      	strb	r3, [r7, #15]
  if(row==0)
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d108      	bne.n	8000fc8 <lcd16x2_i2c_setCursor+0x30>
  {
    maskData |= (0x80);
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fbc:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff15 	bl	8000df0 <lcd16x2_i2c_sendCommand>
  else
  {
    maskData |= (0xc0);
    lcd16x2_i2c_sendCommand(maskData);
  }
}
 8000fc6:	e007      	b.n	8000fd8 <lcd16x2_i2c_setCursor+0x40>
    maskData |= (0xc0);
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
 8000fca:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8000fce:	73fb      	strb	r3, [r7, #15]
    lcd16x2_i2c_sendCommand(maskData);
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff ff0c 	bl	8000df0 <lcd16x2_i2c_sendCommand>
}
 8000fd8:	bf00      	nop
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <lcd16x2_i2c_printf>:

/**
 * @brief Print to display
 */
void lcd16x2_i2c_printf(const char* str, ...)
{
 8000fe0:	b40f      	push	{r0, r1, r2, r3}
 8000fe2:	b590      	push	{r4, r7, lr}
 8000fe4:	b089      	sub	sp, #36	@ 0x24
 8000fe6:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8000fe8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000fec:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8000fee:	f107 0308 	add.w	r3, r7, #8
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f002 fd7e 	bl	8003af8 <vsiprintf>
  va_end(args);
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	77fb      	strb	r3, [r7, #31]
 8001000:	e00a      	b.n	8001018 <lcd16x2_i2c_printf+0x38>
  {
    lcd16x2_i2c_sendData((uint8_t)stringArray[i]);
 8001002:	7ffb      	ldrb	r3, [r7, #31]
 8001004:	3320      	adds	r3, #32
 8001006:	443b      	add	r3, r7
 8001008:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff23 	bl	8000e58 <lcd16x2_i2c_sendData>
  for(uint8_t i=0;  i<strlen(stringArray) && i<16; i++)
 8001012:	7ffb      	ldrb	r3, [r7, #31]
 8001014:	3301      	adds	r3, #1
 8001016:	77fb      	strb	r3, [r7, #31]
 8001018:	7ffc      	ldrb	r4, [r7, #31]
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff f8d6 	bl	80001d0 <strlen>
 8001024:	4603      	mov	r3, r0
 8001026:	429c      	cmp	r4, r3
 8001028:	d202      	bcs.n	8001030 <lcd16x2_i2c_printf+0x50>
 800102a:	7ffb      	ldrb	r3, [r7, #31]
 800102c:	2b0f      	cmp	r3, #15
 800102e:	d9e8      	bls.n	8001002 <lcd16x2_i2c_printf+0x22>
  }
}
 8001030:	bf00      	nop
 8001032:	3724      	adds	r7, #36	@ 0x24
 8001034:	46bd      	mov	sp, r7
 8001036:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800103a:	b004      	add	sp, #16
 800103c:	4770      	bx	lr
	...

08001040 <microDelay>:
uint32_t pMillis, cMillis;
float tCelsius = 0;
float tFahrenheit = 0;
int RH = 0;

void microDelay(uint16_t delay) {
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 800104a:	4b08      	ldr	r3, [pc, #32]	@ (800106c <microDelay+0x2c>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2200      	movs	r2, #0
 8001050:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < delay)
 8001052:	bf00      	nop
 8001054:	4b05      	ldr	r3, [pc, #20]	@ (800106c <microDelay+0x2c>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	429a      	cmp	r2, r3
 800105e:	d3f9      	bcc.n	8001054 <microDelay+0x14>
		;
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	200000d4 	.word	0x200000d4

08001070 <DHT22_Start>:

uint8_t DHT22_Start(void) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	75fb      	strb	r3, [r7, #23]
	GPIO_InitTypeDef GPIO_InitStructPrivate = { 0 };
 800107a:	463b      	mov	r3, r7
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
	GPIO_InitStructPrivate.Pin = DHT22_PIN;
 8001088:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800108c:	603b      	str	r3, [r7, #0]
	GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
	GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as output
 800109a:	463b      	mov	r3, r7
 800109c:	4619      	mov	r1, r3
 800109e:	482d      	ldr	r0, [pc, #180]	@ (8001154 <DHT22_Start+0xe4>)
 80010a0:	f000 fda0 	bl	8001be4 <HAL_GPIO_Init>
	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 80010a4:	2200      	movs	r2, #0
 80010a6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010aa:	482a      	ldr	r0, [pc, #168]	@ (8001154 <DHT22_Start+0xe4>)
 80010ac:	f000 ff4b 	bl	8001f46 <HAL_GPIO_WritePin>
	microDelay(1300);   // wait for 1300us
 80010b0:	f240 5014 	movw	r0, #1300	@ 0x514
 80010b4:	f7ff ffc4 	bl	8001040 <microDelay>
	HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 80010b8:	2201      	movs	r2, #1
 80010ba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010be:	4825      	ldr	r0, [pc, #148]	@ (8001154 <DHT22_Start+0xe4>)
 80010c0:	f000 ff41 	bl	8001f46 <HAL_GPIO_WritePin>
	microDelay(30);   // wait for 30us
 80010c4:	201e      	movs	r0, #30
 80010c6:	f7ff ffbb 	bl	8001040 <microDelay>
	GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 80010ca:	2300      	movs	r3, #0
 80010cc:	607b      	str	r3, [r7, #4]
	GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(DHT22_PORT, &GPIO_InitStructPrivate); // set the pin as input
 80010d2:	463b      	mov	r3, r7
 80010d4:	4619      	mov	r1, r3
 80010d6:	481f      	ldr	r0, [pc, #124]	@ (8001154 <DHT22_Start+0xe4>)
 80010d8:	f000 fd84 	bl	8001be4 <HAL_GPIO_Init>
	microDelay(40);
 80010dc:	2028      	movs	r0, #40	@ 0x28
 80010de:	f7ff ffaf 	bl	8001040 <microDelay>
	if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) {
 80010e2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010e6:	481b      	ldr	r0, [pc, #108]	@ (8001154 <DHT22_Start+0xe4>)
 80010e8:	f000 ff16 	bl	8001f18 <HAL_GPIO_ReadPin>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d10c      	bne.n	800110c <DHT22_Start+0x9c>
		microDelay(80);
 80010f2:	2050      	movs	r0, #80	@ 0x50
 80010f4:	f7ff ffa4 	bl	8001040 <microDelay>
		if ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)))
 80010f8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010fc:	4815      	ldr	r0, [pc, #84]	@ (8001154 <DHT22_Start+0xe4>)
 80010fe:	f000 ff0b 	bl	8001f18 <HAL_GPIO_ReadPin>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <DHT22_Start+0x9c>
			Response = 1;
 8001108:	2301      	movs	r3, #1
 800110a:	75fb      	strb	r3, [r7, #23]
	}
	pMillis = HAL_GetTick();
 800110c:	f000 fc58 	bl	80019c0 <HAL_GetTick>
 8001110:	4603      	mov	r3, r0
 8001112:	4a11      	ldr	r2, [pc, #68]	@ (8001158 <DHT22_Start+0xe8>)
 8001114:	6013      	str	r3, [r2, #0]
	cMillis = HAL_GetTick();
 8001116:	f000 fc53 	bl	80019c0 <HAL_GetTick>
 800111a:	4603      	mov	r3, r0
 800111c:	4a0f      	ldr	r2, [pc, #60]	@ (800115c <DHT22_Start+0xec>)
 800111e:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis) {
 8001120:	e004      	b.n	800112c <DHT22_Start+0xbc>
		cMillis = HAL_GetTick();
 8001122:	f000 fc4d 	bl	80019c0 <HAL_GetTick>
 8001126:	4603      	mov	r3, r0
 8001128:	4a0c      	ldr	r2, [pc, #48]	@ (800115c <DHT22_Start+0xec>)
 800112a:	6013      	str	r3, [r2, #0]
	while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)) && pMillis + 2 > cMillis) {
 800112c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001130:	4808      	ldr	r0, [pc, #32]	@ (8001154 <DHT22_Start+0xe4>)
 8001132:	f000 fef1 	bl	8001f18 <HAL_GPIO_ReadPin>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d006      	beq.n	800114a <DHT22_Start+0xda>
 800113c:	4b06      	ldr	r3, [pc, #24]	@ (8001158 <DHT22_Start+0xe8>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	1c9a      	adds	r2, r3, #2
 8001142:	4b06      	ldr	r3, [pc, #24]	@ (800115c <DHT22_Start+0xec>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	429a      	cmp	r2, r3
 8001148:	d8eb      	bhi.n	8001122 <DHT22_Start+0xb2>
	}
	return Response;
 800114a:	7dfb      	ldrb	r3, [r7, #23]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3718      	adds	r7, #24
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40020400 	.word	0x40020400
 8001158:	20000124 	.word	0x20000124
 800115c:	20000128 	.word	0x20000128

08001160 <DHT22_Read>:

uint8_t DHT22_Read(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	uint8_t a, b;
	for (a = 0; a < 8; a++) {
 8001166:	2300      	movs	r3, #0
 8001168:	71fb      	strb	r3, [r7, #7]
 800116a:	e066      	b.n	800123a <DHT22_Read+0xda>
		pMillis = HAL_GetTick();
 800116c:	f000 fc28 	bl	80019c0 <HAL_GetTick>
 8001170:	4603      	mov	r3, r0
 8001172:	4a36      	ldr	r2, [pc, #216]	@ (800124c <DHT22_Read+0xec>)
 8001174:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 8001176:	f000 fc23 	bl	80019c0 <HAL_GetTick>
 800117a:	4603      	mov	r3, r0
 800117c:	4a34      	ldr	r2, [pc, #208]	@ (8001250 <DHT22_Read+0xf0>)
 800117e:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 8001180:	e004      	b.n	800118c <DHT22_Read+0x2c>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go high
			cMillis = HAL_GetTick();
 8001182:	f000 fc1d 	bl	80019c0 <HAL_GetTick>
 8001186:	4603      	mov	r3, r0
 8001188:	4a31      	ldr	r2, [pc, #196]	@ (8001250 <DHT22_Read+0xf0>)
 800118a:	6013      	str	r3, [r2, #0]
		while (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 800118c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001190:	4830      	ldr	r0, [pc, #192]	@ (8001254 <DHT22_Read+0xf4>)
 8001192:	f000 fec1 	bl	8001f18 <HAL_GPIO_ReadPin>
 8001196:	4603      	mov	r3, r0
				&& pMillis + 2 > cMillis) {  // wait for the pin to go high
 8001198:	2b00      	cmp	r3, #0
 800119a:	d106      	bne.n	80011aa <DHT22_Read+0x4a>
 800119c:	4b2b      	ldr	r3, [pc, #172]	@ (800124c <DHT22_Read+0xec>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	1c9a      	adds	r2, r3, #2
 80011a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001250 <DHT22_Read+0xf0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d8eb      	bhi.n	8001182 <DHT22_Read+0x22>
		}
		microDelay(40);   // wait for 40 us
 80011aa:	2028      	movs	r0, #40	@ 0x28
 80011ac:	f7ff ff48 	bl	8001040 <microDelay>
		if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)))   // if the pin is low
 80011b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011b4:	4827      	ldr	r0, [pc, #156]	@ (8001254 <DHT22_Read+0xf4>)
 80011b6:	f000 feaf 	bl	8001f18 <HAL_GPIO_ReadPin>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d10e      	bne.n	80011de <DHT22_Read+0x7e>
			b &= ~(1 << (7 - a));
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	f1c3 0307 	rsb	r3, r3, #7
 80011c6:	2201      	movs	r2, #1
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	b25b      	sxtb	r3, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	b25a      	sxtb	r2, r3
 80011d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011d6:	4013      	ands	r3, r2
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	71bb      	strb	r3, [r7, #6]
 80011dc:	e00b      	b.n	80011f6 <DHT22_Read+0x96>
		else
			b |= (1 << (7 - a));
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f1c3 0307 	rsb	r3, r3, #7
 80011e4:	2201      	movs	r2, #1
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	b25a      	sxtb	r2, r3
 80011ec:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b25b      	sxtb	r3, r3
 80011f4:	71bb      	strb	r3, [r7, #6]
		pMillis = HAL_GetTick();
 80011f6:	f000 fbe3 	bl	80019c0 <HAL_GetTick>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4a13      	ldr	r2, [pc, #76]	@ (800124c <DHT22_Read+0xec>)
 80011fe:	6013      	str	r3, [r2, #0]
		cMillis = HAL_GetTick();
 8001200:	f000 fbde 	bl	80019c0 <HAL_GetTick>
 8001204:	4603      	mov	r3, r0
 8001206:	4a12      	ldr	r2, [pc, #72]	@ (8001250 <DHT22_Read+0xf0>)
 8001208:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 800120a:	e004      	b.n	8001216 <DHT22_Read+0xb6>
				&& pMillis + 2 > cMillis) {  // wait for the pin to go low
			cMillis = HAL_GetTick();
 800120c:	f000 fbd8 	bl	80019c0 <HAL_GetTick>
 8001210:	4603      	mov	r3, r0
 8001212:	4a0f      	ldr	r2, [pc, #60]	@ (8001250 <DHT22_Read+0xf0>)
 8001214:	6013      	str	r3, [r2, #0]
		while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))
 8001216:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800121a:	480e      	ldr	r0, [pc, #56]	@ (8001254 <DHT22_Read+0xf4>)
 800121c:	f000 fe7c 	bl	8001f18 <HAL_GPIO_ReadPin>
 8001220:	4603      	mov	r3, r0
				&& pMillis + 2 > cMillis) {  // wait for the pin to go low
 8001222:	2b00      	cmp	r3, #0
 8001224:	d006      	beq.n	8001234 <DHT22_Read+0xd4>
 8001226:	4b09      	ldr	r3, [pc, #36]	@ (800124c <DHT22_Read+0xec>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	1c9a      	adds	r2, r3, #2
 800122c:	4b08      	ldr	r3, [pc, #32]	@ (8001250 <DHT22_Read+0xf0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	d8eb      	bhi.n	800120c <DHT22_Read+0xac>
	for (a = 0; a < 8; a++) {
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	3301      	adds	r3, #1
 8001238:	71fb      	strb	r3, [r7, #7]
 800123a:	79fb      	ldrb	r3, [r7, #7]
 800123c:	2b07      	cmp	r3, #7
 800123e:	d995      	bls.n	800116c <DHT22_Read+0xc>
		}
	}
	return b;
 8001240:	79bb      	ldrb	r3, [r7, #6]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000124 	.word	0x20000124
 8001250:	20000128 	.word	0x20000128
 8001254:	40020400 	.word	0x40020400

08001258 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b0a2      	sub	sp, #136	@ 0x88
 800125c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800125e:	f000 fb4b 	bl	80018f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001262:	f000 f8e7 	bl	8001434 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001266:	f000 f9cd 	bl	8001604 <MX_GPIO_Init>
	MX_TIM1_Init();
 800126a:	f000 f97b 	bl	8001564 <MX_TIM1_Init>
	MX_I2C1_Init();
 800126e:	f000 f94b 	bl	8001508 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start(&htim1);
 8001272:	4860      	ldr	r0, [pc, #384]	@ (80013f4 <main+0x19c>)
 8001274:	f002 f922 	bl	80034bc <HAL_TIM_Base_Start>
	/* USER CODE BEGIN WHILE */
	while (1) {

		/* USER CODE END WHILE */

		if (DHT22_Start()) {
 8001278:	f7ff fefa 	bl	8001070 <DHT22_Start>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 8083 	beq.w	800138a <main+0x132>
			RH1 = DHT22_Read(); // First 8bits of humidity
 8001284:	f7ff ff6c 	bl	8001160 <DHT22_Read>
 8001288:	4603      	mov	r3, r0
 800128a:	461a      	mov	r2, r3
 800128c:	4b5a      	ldr	r3, [pc, #360]	@ (80013f8 <main+0x1a0>)
 800128e:	701a      	strb	r2, [r3, #0]
			RH2 = DHT22_Read(); // Second 8bits of Relative humidity
 8001290:	f7ff ff66 	bl	8001160 <DHT22_Read>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	4b58      	ldr	r3, [pc, #352]	@ (80013fc <main+0x1a4>)
 800129a:	701a      	strb	r2, [r3, #0]
			TC1 = DHT22_Read(); // First 8bits of Celsius
 800129c:	f7ff ff60 	bl	8001160 <DHT22_Read>
 80012a0:	4603      	mov	r3, r0
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b56      	ldr	r3, [pc, #344]	@ (8001400 <main+0x1a8>)
 80012a6:	701a      	strb	r2, [r3, #0]
			TC2 = DHT22_Read(); // Second 8bits of Celsius
 80012a8:	f7ff ff5a 	bl	8001160 <DHT22_Read>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	4b54      	ldr	r3, [pc, #336]	@ (8001404 <main+0x1ac>)
 80012b2:	701a      	strb	r2, [r3, #0]
			SUM = DHT22_Read(); // Check sum
 80012b4:	f7ff ff54 	bl	8001160 <DHT22_Read>
 80012b8:	4603      	mov	r3, r0
 80012ba:	461a      	mov	r2, r3
 80012bc:	4b52      	ldr	r3, [pc, #328]	@ (8001408 <main+0x1b0>)
 80012be:	701a      	strb	r2, [r3, #0]
			CHECK = RH1 + RH2 + TC1 + TC2;
 80012c0:	4b4d      	ldr	r3, [pc, #308]	@ (80013f8 <main+0x1a0>)
 80012c2:	781a      	ldrb	r2, [r3, #0]
 80012c4:	4b4d      	ldr	r3, [pc, #308]	@ (80013fc <main+0x1a4>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4413      	add	r3, r2
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	4b4c      	ldr	r3, [pc, #304]	@ (8001400 <main+0x1a8>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	4413      	add	r3, r2
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001404 <main+0x1ac>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4413      	add	r3, r2
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	4b4b      	ldr	r3, [pc, #300]	@ (800140c <main+0x1b4>)
 80012de:	701a      	strb	r2, [r3, #0]
			if (CHECK == SUM) {
 80012e0:	4b4a      	ldr	r3, [pc, #296]	@ (800140c <main+0x1b4>)
 80012e2:	781a      	ldrb	r2, [r3, #0]
 80012e4:	4b48      	ldr	r3, [pc, #288]	@ (8001408 <main+0x1b0>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d14e      	bne.n	800138a <main+0x132>
				if (TC1 > 127) // If TC1=10000000, negative temperature
 80012ec:	4b44      	ldr	r3, [pc, #272]	@ (8001400 <main+0x1a8>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	b25b      	sxtb	r3, r3
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	da0f      	bge.n	8001316 <main+0xbe>
						{
					tCelsius = (float) TC2 / 10 * (-1);
 80012f6:	4b43      	ldr	r3, [pc, #268]	@ (8001404 <main+0x1ac>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff fa32 	bl	8000764 <__aeabi_ui2f>
 8001300:	4603      	mov	r3, r0
 8001302:	4943      	ldr	r1, [pc, #268]	@ (8001410 <main+0x1b8>)
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fb39 	bl	800097c <__aeabi_fdiv>
 800130a:	4603      	mov	r3, r0
 800130c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001310:	4a40      	ldr	r2, [pc, #256]	@ (8001414 <main+0x1bc>)
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	e011      	b.n	800133a <main+0xe2>
				} else {
					tCelsius = (float) ((TC1 << 8) | TC2) / 10;
 8001316:	4b3a      	ldr	r3, [pc, #232]	@ (8001400 <main+0x1a8>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	021b      	lsls	r3, r3, #8
 800131c:	4a39      	ldr	r2, [pc, #228]	@ (8001404 <main+0x1ac>)
 800131e:	7812      	ldrb	r2, [r2, #0]
 8001320:	4313      	orrs	r3, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff fa22 	bl	800076c <__aeabi_i2f>
 8001328:	4603      	mov	r3, r0
 800132a:	4939      	ldr	r1, [pc, #228]	@ (8001410 <main+0x1b8>)
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff fb25 	bl	800097c <__aeabi_fdiv>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b37      	ldr	r3, [pc, #220]	@ (8001414 <main+0x1bc>)
 8001338:	601a      	str	r2, [r3, #0]
				}
				//tFahrenheit = (float) (tCelsius * 9 / 5 + 32);
				tFahrenheit = (int) (tCelsius * 9 / 5 + 32)*10;
 800133a:	4b36      	ldr	r3, [pc, #216]	@ (8001414 <main+0x1bc>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4936      	ldr	r1, [pc, #216]	@ (8001418 <main+0x1c0>)
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff fa67 	bl	8000814 <__aeabi_fmul>
 8001346:	4603      	mov	r3, r0
 8001348:	4934      	ldr	r1, [pc, #208]	@ (800141c <main+0x1c4>)
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fb16 	bl	800097c <__aeabi_fdiv>
 8001350:	4603      	mov	r3, r0
 8001352:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f954 	bl	8000604 <__addsf3>
 800135c:	4603      	mov	r3, r0
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff fba8 	bl	8000ab4 <__aeabi_f2iz>
 8001364:	4602      	mov	r2, r0
 8001366:	4613      	mov	r3, r2
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f9fc 	bl	800076c <__aeabi_i2f>
 8001374:	4603      	mov	r3, r0
 8001376:	4a2a      	ldr	r2, [pc, #168]	@ (8001420 <main+0x1c8>)
 8001378:	6013      	str	r3, [r2, #0]
				//RH = (float) ((RH1 << 8) | RH2) / 10;
				RH = (int) ((RH1 << 8) | RH2);
 800137a:	4b1f      	ldr	r3, [pc, #124]	@ (80013f8 <main+0x1a0>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	021b      	lsls	r3, r3, #8
 8001380:	4a1e      	ldr	r2, [pc, #120]	@ (80013fc <main+0x1a4>)
 8001382:	7812      	ldrb	r2, [r2, #0]
 8001384:	4313      	orrs	r3, r2
 8001386:	4a27      	ldr	r2, [pc, #156]	@ (8001424 <main+0x1cc>)
 8001388:	6013      	str	r3, [r2, #0]
			}
		}

		int ret = lcd16x2_i2c_init(&hi2c1);
 800138a:	4827      	ldr	r0, [pc, #156]	@ (8001428 <main+0x1d0>)
 800138c:	f7ff fd98 	bl	8000ec0 <lcd16x2_i2c_init>
 8001390:	4603      	mov	r3, r0
 8001392:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
		DHT22_Read();
 8001396:	f7ff fee3 	bl	8001160 <DHT22_Read>
		sprintf(str0, "temperature : %d \r \n",tFahrenheit);
 800139a:	4b21      	ldr	r3, [pc, #132]	@ (8001420 <main+0x1c8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f8d2 	bl	8000548 <__aeabi_f2d>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 80013ac:	491f      	ldr	r1, [pc, #124]	@ (800142c <main+0x1d4>)
 80013ae:	f002 fb6d 	bl	8003a8c <siprintf>
		sprintf(str1, "humidity : %d \r \n",RH);
 80013b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001424 <main+0x1cc>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	491d      	ldr	r1, [pc, #116]	@ (8001430 <main+0x1d8>)
 80013ba:	4618      	mov	r0, r3
 80013bc:	f002 fb66 	bl	8003a8c <siprintf>
		if(ret)
 80013c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d010      	beq.n	80013ea <main+0x192>
		{
			lcd16x2_i2c_setCursor(0, 0);
 80013c8:	2100      	movs	r1, #0
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff fde4 	bl	8000f98 <lcd16x2_i2c_setCursor>
			lcd16x2_i2c_printf(str0);
 80013d0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fe03 	bl	8000fe0 <lcd16x2_i2c_printf>
			lcd16x2_i2c_setCursor(1, 0);
 80013da:	2100      	movs	r1, #0
 80013dc:	2001      	movs	r0, #1
 80013de:	f7ff fddb 	bl	8000f98 <lcd16x2_i2c_setCursor>
			lcd16x2_i2c_printf(str1);
 80013e2:	1d3b      	adds	r3, r7, #4
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fdfb 	bl	8000fe0 <lcd16x2_i2c_printf>
		}

		HAL_Delay(1000);
 80013ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80013ee:	f000 faf1 	bl	80019d4 <HAL_Delay>
	while (1) {
 80013f2:	e741      	b.n	8001278 <main+0x20>
 80013f4:	200000d4 	.word	0x200000d4
 80013f8:	2000011c 	.word	0x2000011c
 80013fc:	2000011d 	.word	0x2000011d
 8001400:	2000011e 	.word	0x2000011e
 8001404:	2000011f 	.word	0x2000011f
 8001408:	20000120 	.word	0x20000120
 800140c:	20000121 	.word	0x20000121
 8001410:	41200000 	.word	0x41200000
 8001414:	2000012c 	.word	0x2000012c
 8001418:	41100000 	.word	0x41100000
 800141c:	40a00000 	.word	0x40a00000
 8001420:	20000130 	.word	0x20000130
 8001424:	20000134 	.word	0x20000134
 8001428:	20000080 	.word	0x20000080
 800142c:	08004424 	.word	0x08004424
 8001430:	0800443c 	.word	0x0800443c

08001434 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b094      	sub	sp, #80	@ 0x50
 8001438:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800143a:	f107 0320 	add.w	r3, r7, #32
 800143e:	2230      	movs	r2, #48	@ 0x30
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fb62 	bl	8003b0c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001448:	f107 030c 	add.w	r3, r7, #12
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
 800145c:	4b28      	ldr	r3, [pc, #160]	@ (8001500 <SystemClock_Config+0xcc>)
 800145e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001460:	4a27      	ldr	r2, [pc, #156]	@ (8001500 <SystemClock_Config+0xcc>)
 8001462:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001466:	6413      	str	r3, [r2, #64]	@ 0x40
 8001468:	4b25      	ldr	r3, [pc, #148]	@ (8001500 <SystemClock_Config+0xcc>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800146c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001474:	2300      	movs	r3, #0
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	4b22      	ldr	r3, [pc, #136]	@ (8001504 <SystemClock_Config+0xd0>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a21      	ldr	r2, [pc, #132]	@ (8001504 <SystemClock_Config+0xd0>)
 800147e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	4b1f      	ldr	r3, [pc, #124]	@ (8001504 <SystemClock_Config+0xd0>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800148c:	607b      	str	r3, [r7, #4]
 800148e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001490:	2302      	movs	r3, #2
 8001492:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001494:	2301      	movs	r3, #1
 8001496:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001498:	2310      	movs	r3, #16
 800149a:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800149c:	2302      	movs	r3, #2
 800149e:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014a0:	2300      	movs	r3, #0
 80014a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80014a4:	2308      	movs	r3, #8
 80014a6:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 80014a8:	2348      	movs	r3, #72	@ 0x48
 80014aa:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ac:	2302      	movs	r3, #2
 80014ae:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80014b0:	2307      	movs	r3, #7
 80014b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80014b4:	f107 0320 	add.w	r3, r7, #32
 80014b8:	4618      	mov	r0, r3
 80014ba:	f001 fb27 	bl	8002b0c <HAL_RCC_OscConfig>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <SystemClock_Config+0x94>
		Error_Handler();
 80014c4:	f000 f8f0 	bl	80016a8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80014c8:	230f      	movs	r3, #15
 80014ca:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014cc:	2302      	movs	r3, #2
 80014ce:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80014d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014d8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014de:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2102      	movs	r1, #2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f001 fd88 	bl	8002ffc <HAL_RCC_ClockConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0xc2>
		Error_Handler();
 80014f2:	f000 f8d9 	bl	80016a8 <Error_Handler>
	}
}
 80014f6:	bf00      	nop
 80014f8:	3750      	adds	r7, #80	@ 0x50
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40023800 	.word	0x40023800
 8001504:	40007000 	.word	0x40007000

08001508 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800150c:	4b12      	ldr	r3, [pc, #72]	@ (8001558 <MX_I2C1_Init+0x50>)
 800150e:	4a13      	ldr	r2, [pc, #76]	@ (800155c <MX_I2C1_Init+0x54>)
 8001510:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001512:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <MX_I2C1_Init+0x50>)
 8001514:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <MX_I2C1_Init+0x58>)
 8001516:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001518:	4b0f      	ldr	r3, [pc, #60]	@ (8001558 <MX_I2C1_Init+0x50>)
 800151a:	2200      	movs	r2, #0
 800151c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800151e:	4b0e      	ldr	r3, [pc, #56]	@ (8001558 <MX_I2C1_Init+0x50>)
 8001520:	2200      	movs	r2, #0
 8001522:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <MX_I2C1_Init+0x50>)
 8001526:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800152a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800152c:	4b0a      	ldr	r3, [pc, #40]	@ (8001558 <MX_I2C1_Init+0x50>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001532:	4b09      	ldr	r3, [pc, #36]	@ (8001558 <MX_I2C1_Init+0x50>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001538:	4b07      	ldr	r3, [pc, #28]	@ (8001558 <MX_I2C1_Init+0x50>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800153e:	4b06      	ldr	r3, [pc, #24]	@ (8001558 <MX_I2C1_Init+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001544:	4804      	ldr	r0, [pc, #16]	@ (8001558 <MX_I2C1_Init+0x50>)
 8001546:	f000 fd17 	bl	8001f78 <HAL_I2C_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001550:	f000 f8aa 	bl	80016a8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000080 	.word	0x20000080
 800155c:	40005400 	.word	0x40005400
 8001560:	000186a0 	.word	0x000186a0

08001564 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001578:	463b      	mov	r3, r7
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001580:	4b1e      	ldr	r3, [pc, #120]	@ (80015fc <MX_TIM1_Init+0x98>)
 8001582:	4a1f      	ldr	r2, [pc, #124]	@ (8001600 <MX_TIM1_Init+0x9c>)
 8001584:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 71;
 8001586:	4b1d      	ldr	r3, [pc, #116]	@ (80015fc <MX_TIM1_Init+0x98>)
 8001588:	2247      	movs	r2, #71	@ 0x47
 800158a:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158c:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <MX_TIM1_Init+0x98>)
 800158e:	2200      	movs	r2, #0
 8001590:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001592:	4b1a      	ldr	r3, [pc, #104]	@ (80015fc <MX_TIM1_Init+0x98>)
 8001594:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001598:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159a:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <MX_TIM1_Init+0x98>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80015a0:	4b16      	ldr	r3, [pc, #88]	@ (80015fc <MX_TIM1_Init+0x98>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a6:	4b15      	ldr	r3, [pc, #84]	@ (80015fc <MX_TIM1_Init+0x98>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 80015ac:	4813      	ldr	r0, [pc, #76]	@ (80015fc <MX_TIM1_Init+0x98>)
 80015ae:	f001 ff35 	bl	800341c <HAL_TIM_Base_Init>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <MX_TIM1_Init+0x58>
		Error_Handler();
 80015b8:	f000 f876 	bl	80016a8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015c0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 80015c2:	f107 0308 	add.w	r3, r7, #8
 80015c6:	4619      	mov	r1, r3
 80015c8:	480c      	ldr	r0, [pc, #48]	@ (80015fc <MX_TIM1_Init+0x98>)
 80015ca:	f001 ffdd 	bl	8003588 <HAL_TIM_ConfigClockSource>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d001      	beq.n	80015d8 <MX_TIM1_Init+0x74>
		Error_Handler();
 80015d4:	f000 f868 	bl	80016a8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d8:	2300      	movs	r3, #0
 80015da:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80015e0:	463b      	mov	r3, r7
 80015e2:	4619      	mov	r1, r3
 80015e4:	4805      	ldr	r0, [pc, #20]	@ (80015fc <MX_TIM1_Init+0x98>)
 80015e6:	f002 f9d7 	bl	8003998 <HAL_TIMEx_MasterConfigSynchronization>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM1_Init+0x90>
			!= HAL_OK) {
		Error_Handler();
 80015f0:	f000 f85a 	bl	80016a8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80015f4:	bf00      	nop
 80015f6:	3718      	adds	r7, #24
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200000d4 	.word	0x200000d4
 8001600:	40010000 	.word	0x40010000

08001604 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800160a:	f107 030c 	add.w	r3, r7, #12
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
 8001612:	605a      	str	r2, [r3, #4]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	60da      	str	r2, [r3, #12]
 8001618:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	4b20      	ldr	r3, [pc, #128]	@ (80016a0 <MX_GPIO_Init+0x9c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a1f      	ldr	r2, [pc, #124]	@ (80016a0 <MX_GPIO_Init+0x9c>)
 8001624:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b1d      	ldr	r3, [pc, #116]	@ (80016a0 <MX_GPIO_Init+0x9c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <MX_GPIO_Init+0x9c>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a18      	ldr	r2, [pc, #96]	@ (80016a0 <MX_GPIO_Init+0x9c>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b16      	ldr	r3, [pc, #88]	@ (80016a0 <MX_GPIO_Init+0x9c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	4b12      	ldr	r3, [pc, #72]	@ (80016a0 <MX_GPIO_Init+0x9c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800165a:	4a11      	ldr	r2, [pc, #68]	@ (80016a0 <MX_GPIO_Init+0x9c>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6313      	str	r3, [r2, #48]	@ 0x30
 8001662:	4b0f      	ldr	r3, [pc, #60]	@ (80016a0 <MX_GPIO_Init+0x9c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001674:	480b      	ldr	r0, [pc, #44]	@ (80016a4 <MX_GPIO_Init+0xa0>)
 8001676:	f000 fc66 	bl	8001f46 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_9;
 800167a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800167e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001680:	2301      	movs	r3, #1
 8001682:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001688:	2300      	movs	r3, #0
 800168a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168c:	f107 030c 	add.w	r3, r7, #12
 8001690:	4619      	mov	r1, r3
 8001692:	4804      	ldr	r0, [pc, #16]	@ (80016a4 <MX_GPIO_Init+0xa0>)
 8001694:	f000 faa6 	bl	8001be4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001698:	bf00      	nop
 800169a:	3720      	adds	r7, #32
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020400 	.word	0x40020400

080016a8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ac:	b672      	cpsid	i
}
 80016ae:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80016b0:	bf00      	nop
 80016b2:	e7fd      	b.n	80016b0 <Error_Handler+0x8>

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <HAL_MspInit+0x4c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001700 <HAL_MspInit+0x4c>)
 80016c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <HAL_MspInit+0x4c>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <HAL_MspInit+0x4c>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	4a08      	ldr	r2, [pc, #32]	@ (8001700 <HAL_MspInit+0x4c>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_MspInit+0x4c>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016f2:	2007      	movs	r0, #7
 80016f4:	f000 fa42 	bl	8001b7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800

08001704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	@ 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a19      	ldr	r2, [pc, #100]	@ (8001788 <HAL_I2C_MspInit+0x84>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d12b      	bne.n	800177e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b18      	ldr	r3, [pc, #96]	@ (800178c <HAL_I2C_MspInit+0x88>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a17      	ldr	r2, [pc, #92]	@ (800178c <HAL_I2C_MspInit+0x88>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_I2C_MspInit+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001742:	23c0      	movs	r3, #192	@ 0xc0
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001746:	2312      	movs	r3, #18
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001752:	2304      	movs	r3, #4
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	480c      	ldr	r0, [pc, #48]	@ (8001790 <HAL_I2C_MspInit+0x8c>)
 800175e:	f000 fa41 	bl	8001be4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <HAL_I2C_MspInit+0x88>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	4a08      	ldr	r2, [pc, #32]	@ (800178c <HAL_I2C_MspInit+0x88>)
 800176c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001770:	6413      	str	r3, [r2, #64]	@ 0x40
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_I2C_MspInit+0x88>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	@ 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40005400 	.word	0x40005400
 800178c:	40023800 	.word	0x40023800
 8001790:	40020400 	.word	0x40020400

08001794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <HAL_TIM_Base_MspInit+0x38>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d10d      	bne.n	80017c2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b09      	ldr	r3, [pc, #36]	@ (80017d0 <HAL_TIM_Base_MspInit+0x3c>)
 80017ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ae:	4a08      	ldr	r2, [pc, #32]	@ (80017d0 <HAL_TIM_Base_MspInit+0x3c>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017b6:	4b06      	ldr	r3, [pc, #24]	@ (80017d0 <HAL_TIM_Base_MspInit+0x3c>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80017c2:	bf00      	nop
 80017c4:	3714      	adds	r7, #20
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc80      	pop	{r7}
 80017ca:	4770      	bx	lr
 80017cc:	40010000 	.word	0x40010000
 80017d0:	40023800 	.word	0x40023800

080017d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017d8:	bf00      	nop
 80017da:	e7fd      	b.n	80017d8 <NMI_Handler+0x4>

080017dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <HardFault_Handler+0x4>

080017e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <MemManage_Handler+0x4>

080017ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f0:	bf00      	nop
 80017f2:	e7fd      	b.n	80017f0 <BusFault_Handler+0x4>

080017f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <UsageFault_Handler+0x4>

080017fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr

08001808 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	bc80      	pop	{r7}
 8001812:	4770      	bx	lr

08001814 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr

08001820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001824:	f000 f8ba 	bl	800199c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001828:	bf00      	nop
 800182a:	bd80      	pop	{r7, pc}

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001834:	4a14      	ldr	r2, [pc, #80]	@ (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	@ (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001840:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	@ (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800185c:	f002 f95e 	bl	8003b1c <__errno>
 8001860:	4603      	mov	r3, r0
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b07      	ldr	r3, [pc, #28]	@ (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	@ (8001890 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20020000 	.word	0x20020000
 800188c:	00000400 	.word	0x00000400
 8001890:	20000138 	.word	0x20000138
 8001894:	20000288 	.word	0x20000288

08001898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018a4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80018a8:	f7ff fff6 	bl	8001898 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018ac:	480c      	ldr	r0, [pc, #48]	@ (80018e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018ae:	490d      	ldr	r1, [pc, #52]	@ (80018e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018b0:	4a0d      	ldr	r2, [pc, #52]	@ (80018e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b4:	e002      	b.n	80018bc <LoopCopyDataInit>

080018b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018ba:	3304      	adds	r3, #4

080018bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c0:	d3f9      	bcc.n	80018b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c2:	4a0a      	ldr	r2, [pc, #40]	@ (80018ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018c4:	4c0a      	ldr	r4, [pc, #40]	@ (80018f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c8:	e001      	b.n	80018ce <LoopFillZerobss>

080018ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018cc:	3204      	adds	r2, #4

080018ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d0:	d3fb      	bcc.n	80018ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018d2:	f002 f929 	bl	8003b28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018d6:	f7ff fcbf 	bl	8001258 <main>
  bx  lr    
 80018da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80018e8:	080044ac 	.word	0x080044ac
  ldr r2, =_sbss
 80018ec:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80018f0:	20000288 	.word	0x20000288

080018f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC_IRQHandler>
	...

080018f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001938 <HAL_Init+0x40>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0d      	ldr	r2, [pc, #52]	@ (8001938 <HAL_Init+0x40>)
 8001902:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001908:	4b0b      	ldr	r3, [pc, #44]	@ (8001938 <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0a      	ldr	r2, [pc, #40]	@ (8001938 <HAL_Init+0x40>)
 800190e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001914:	4b08      	ldr	r3, [pc, #32]	@ (8001938 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a07      	ldr	r2, [pc, #28]	@ (8001938 <HAL_Init+0x40>)
 800191a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800191e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001920:	2003      	movs	r0, #3
 8001922:	f000 f92b 	bl	8001b7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001926:	2000      	movs	r0, #0
 8001928:	f000 f808 	bl	800193c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800192c:	f7ff fec2 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023c00 	.word	0x40023c00

0800193c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001944:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <HAL_InitTick+0x54>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b12      	ldr	r3, [pc, #72]	@ (8001994 <HAL_InitTick+0x58>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001952:	fbb3 f3f1 	udiv	r3, r3, r1
 8001956:	fbb2 f3f3 	udiv	r3, r2, r3
 800195a:	4618      	mov	r0, r3
 800195c:	f000 f935 	bl	8001bca <HAL_SYSTICK_Config>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e00e      	b.n	8001988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b0f      	cmp	r3, #15
 800196e:	d80a      	bhi.n	8001986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001970:	2200      	movs	r2, #0
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001978:	f000 f90b 	bl	8001b92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800197c:	4a06      	ldr	r2, [pc, #24]	@ (8001998 <HAL_InitTick+0x5c>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	e000      	b.n	8001988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000000 	.word	0x20000000
 8001994:	20000008 	.word	0x20000008
 8001998:	20000004 	.word	0x20000004

0800199c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a0:	4b05      	ldr	r3, [pc, #20]	@ (80019b8 <HAL_IncTick+0x1c>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <HAL_IncTick+0x20>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	4a03      	ldr	r2, [pc, #12]	@ (80019bc <HAL_IncTick+0x20>)
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr
 80019b8:	20000008 	.word	0x20000008
 80019bc:	2000013c 	.word	0x2000013c

080019c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return uwTick;
 80019c4:	4b02      	ldr	r3, [pc, #8]	@ (80019d0 <HAL_GetTick+0x10>)
 80019c6:	681b      	ldr	r3, [r3, #0]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	2000013c 	.word	0x2000013c

080019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff fff0 	bl	80019c0 <HAL_GetTick>
 80019e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80019ec:	d005      	beq.n	80019fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001a18 <HAL_Delay+0x44>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019fa:	bf00      	nop
 80019fc:	f7ff ffe0 	bl	80019c0 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d8f7      	bhi.n	80019fc <HAL_Delay+0x28>
  {
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000008 	.word	0x20000008

08001a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a32:	68ba      	ldr	r2, [r7, #8]
 8001a34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a40:	68bb      	ldr	r3, [r7, #8]
 8001a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4e:	4a04      	ldr	r2, [pc, #16]	@ (8001a60 <__NVIC_SetPriorityGrouping+0x44>)
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	60d3      	str	r3, [r2, #12]
}
 8001a54:	bf00      	nop
 8001a56:	3714      	adds	r7, #20
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	e000ed00 	.word	0xe000ed00

08001a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a68:	4b04      	ldr	r3, [pc, #16]	@ (8001a7c <__NVIC_GetPriorityGrouping+0x18>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	0a1b      	lsrs	r3, r3, #8
 8001a6e:	f003 0307 	and.w	r3, r3, #7
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bc80      	pop	{r7}
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db0a      	blt.n	8001aaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	490c      	ldr	r1, [pc, #48]	@ (8001acc <__NVIC_SetPriority+0x4c>)
 8001a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	b2d2      	uxtb	r2, r2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aa8:	e00a      	b.n	8001ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	4908      	ldr	r1, [pc, #32]	@ (8001ad0 <__NVIC_SetPriority+0x50>)
 8001ab0:	79fb      	ldrb	r3, [r7, #7]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	3b04      	subs	r3, #4
 8001ab8:	0112      	lsls	r2, r2, #4
 8001aba:	b2d2      	uxtb	r2, r2
 8001abc:	440b      	add	r3, r1
 8001abe:	761a      	strb	r2, [r3, #24]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100
 8001ad0:	e000ed00 	.word	0xe000ed00

08001ad4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b089      	sub	sp, #36	@ 0x24
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f1c3 0307 	rsb	r3, r3, #7
 8001aee:	2b04      	cmp	r3, #4
 8001af0:	bf28      	it	cs
 8001af2:	2304      	movcs	r3, #4
 8001af4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	3304      	adds	r3, #4
 8001afa:	2b06      	cmp	r3, #6
 8001afc:	d902      	bls.n	8001b04 <NVIC_EncodePriority+0x30>
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3b03      	subs	r3, #3
 8001b02:	e000      	b.n	8001b06 <NVIC_EncodePriority+0x32>
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43da      	mvns	r2, r3
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	401a      	ands	r2, r3
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b1c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43d9      	mvns	r1, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b2c:	4313      	orrs	r3, r2
         );
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3724      	adds	r7, #36	@ 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b48:	d301      	bcc.n	8001b4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e00f      	b.n	8001b6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b78 <SysTick_Config+0x40>)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	3b01      	subs	r3, #1
 8001b54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b56:	210f      	movs	r1, #15
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b5c:	f7ff ff90 	bl	8001a80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b60:	4b05      	ldr	r3, [pc, #20]	@ (8001b78 <SysTick_Config+0x40>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b66:	4b04      	ldr	r3, [pc, #16]	@ (8001b78 <SysTick_Config+0x40>)
 8001b68:	2207      	movs	r2, #7
 8001b6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	e000e010 	.word	0xe000e010

08001b7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f7ff ff49 	bl	8001a1c <__NVIC_SetPriorityGrouping>
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}

08001b92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b086      	sub	sp, #24
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	4603      	mov	r3, r0
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ba4:	f7ff ff5e 	bl	8001a64 <__NVIC_GetPriorityGrouping>
 8001ba8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	68b9      	ldr	r1, [r7, #8]
 8001bae:	6978      	ldr	r0, [r7, #20]
 8001bb0:	f7ff ff90 	bl	8001ad4 <NVIC_EncodePriority>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f7ff ff5f 	bl	8001a80 <__NVIC_SetPriority>
}
 8001bc2:	bf00      	nop
 8001bc4:	3718      	adds	r7, #24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b082      	sub	sp, #8
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f7ff ffb0 	bl	8001b38 <SysTick_Config>
 8001bd8:	4603      	mov	r3, r0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
	...

08001be4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b089      	sub	sp, #36	@ 0x24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	61fb      	str	r3, [r7, #28]
 8001bfe:	e16b      	b.n	8001ed8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c00:	2201      	movs	r2, #1
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	fa02 f303 	lsl.w	r3, r2, r3
 8001c08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	697a      	ldr	r2, [r7, #20]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	f040 815a 	bne.w	8001ed2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d005      	beq.n	8001c36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d130      	bne.n	8001c98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	005b      	lsls	r3, r3, #1
 8001c40:	2203      	movs	r2, #3
 8001c42:	fa02 f303 	lsl.w	r3, r2, r3
 8001c46:	43db      	mvns	r3, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	68da      	ldr	r2, [r3, #12]
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	43db      	mvns	r3, r3
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	091b      	lsrs	r3, r3, #4
 8001c82:	f003 0201 	and.w	r2, r3, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b03      	cmp	r3, #3
 8001ca2:	d017      	beq.n	8001cd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	68db      	ldr	r3, [r3, #12]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	005b      	lsls	r3, r3, #1
 8001cae:	2203      	movs	r2, #3
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	689a      	ldr	r2, [r3, #8]
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d123      	bne.n	8001d28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	08da      	lsrs	r2, r3, #3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3208      	adds	r2, #8
 8001ce8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	220f      	movs	r2, #15
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	691a      	ldr	r2, [r3, #16]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	08da      	lsrs	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3208      	adds	r2, #8
 8001d22:	69b9      	ldr	r1, [r7, #24]
 8001d24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0203 	and.w	r2, r3, #3
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80b4 	beq.w	8001ed2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60fb      	str	r3, [r7, #12]
 8001d6e:	4b5f      	ldr	r3, [pc, #380]	@ (8001eec <HAL_GPIO_Init+0x308>)
 8001d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d72:	4a5e      	ldr	r2, [pc, #376]	@ (8001eec <HAL_GPIO_Init+0x308>)
 8001d74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d7a:	4b5c      	ldr	r3, [pc, #368]	@ (8001eec <HAL_GPIO_Init+0x308>)
 8001d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d86:	4a5a      	ldr	r2, [pc, #360]	@ (8001ef0 <HAL_GPIO_Init+0x30c>)
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	089b      	lsrs	r3, r3, #2
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	220f      	movs	r2, #15
 8001d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001da2:	43db      	mvns	r3, r3
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	4013      	ands	r3, r2
 8001da8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a51      	ldr	r2, [pc, #324]	@ (8001ef4 <HAL_GPIO_Init+0x310>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d02b      	beq.n	8001e0a <HAL_GPIO_Init+0x226>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a50      	ldr	r2, [pc, #320]	@ (8001ef8 <HAL_GPIO_Init+0x314>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d025      	beq.n	8001e06 <HAL_GPIO_Init+0x222>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a4f      	ldr	r2, [pc, #316]	@ (8001efc <HAL_GPIO_Init+0x318>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d01f      	beq.n	8001e02 <HAL_GPIO_Init+0x21e>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a4e      	ldr	r2, [pc, #312]	@ (8001f00 <HAL_GPIO_Init+0x31c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d019      	beq.n	8001dfe <HAL_GPIO_Init+0x21a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a4d      	ldr	r2, [pc, #308]	@ (8001f04 <HAL_GPIO_Init+0x320>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <HAL_GPIO_Init+0x216>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4c      	ldr	r2, [pc, #304]	@ (8001f08 <HAL_GPIO_Init+0x324>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00d      	beq.n	8001df6 <HAL_GPIO_Init+0x212>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a4b      	ldr	r2, [pc, #300]	@ (8001f0c <HAL_GPIO_Init+0x328>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d007      	beq.n	8001df2 <HAL_GPIO_Init+0x20e>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a4a      	ldr	r2, [pc, #296]	@ (8001f10 <HAL_GPIO_Init+0x32c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d101      	bne.n	8001dee <HAL_GPIO_Init+0x20a>
 8001dea:	2307      	movs	r3, #7
 8001dec:	e00e      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001dee:	2308      	movs	r3, #8
 8001df0:	e00c      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001df2:	2306      	movs	r3, #6
 8001df4:	e00a      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001df6:	2305      	movs	r3, #5
 8001df8:	e008      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001dfa:	2304      	movs	r3, #4
 8001dfc:	e006      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e004      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e002      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001e06:	2301      	movs	r3, #1
 8001e08:	e000      	b.n	8001e0c <HAL_GPIO_Init+0x228>
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	69fa      	ldr	r2, [r7, #28]
 8001e0e:	f002 0203 	and.w	r2, r2, #3
 8001e12:	0092      	lsls	r2, r2, #2
 8001e14:	4093      	lsls	r3, r2
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e1c:	4934      	ldr	r1, [pc, #208]	@ (8001ef0 <HAL_GPIO_Init+0x30c>)
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	089b      	lsrs	r3, r3, #2
 8001e22:	3302      	adds	r3, #2
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e2a:	4b3a      	ldr	r3, [pc, #232]	@ (8001f14 <HAL_GPIO_Init+0x330>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	43db      	mvns	r3, r3
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	4013      	ands	r3, r2
 8001e38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e4e:	4a31      	ldr	r2, [pc, #196]	@ (8001f14 <HAL_GPIO_Init+0x330>)
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e54:	4b2f      	ldr	r3, [pc, #188]	@ (8001f14 <HAL_GPIO_Init+0x330>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e78:	4a26      	ldr	r2, [pc, #152]	@ (8001f14 <HAL_GPIO_Init+0x330>)
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e7e:	4b25      	ldr	r3, [pc, #148]	@ (8001f14 <HAL_GPIO_Init+0x330>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	43db      	mvns	r3, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d003      	beq.n	8001ea2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8001f14 <HAL_GPIO_Init+0x330>)
 8001ea4:	69bb      	ldr	r3, [r7, #24]
 8001ea6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8001f14 <HAL_GPIO_Init+0x330>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	69ba      	ldr	r2, [r7, #24]
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d003      	beq.n	8001ecc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ecc:	4a11      	ldr	r2, [pc, #68]	@ (8001f14 <HAL_GPIO_Init+0x330>)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	2b0f      	cmp	r3, #15
 8001edc:	f67f ae90 	bls.w	8001c00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ee0:	bf00      	nop
 8001ee2:	bf00      	nop
 8001ee4:	3724      	adds	r7, #36	@ 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bc80      	pop	{r7}
 8001eea:	4770      	bx	lr
 8001eec:	40023800 	.word	0x40023800
 8001ef0:	40013800 	.word	0x40013800
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	40020400 	.word	0x40020400
 8001efc:	40020800 	.word	0x40020800
 8001f00:	40020c00 	.word	0x40020c00
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40021400 	.word	0x40021400
 8001f0c:	40021800 	.word	0x40021800
 8001f10:	40021c00 	.word	0x40021c00
 8001f14:	40013c00 	.word	0x40013c00

08001f18 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691a      	ldr	r2, [r3, #16]
 8001f28:	887b      	ldrh	r3, [r7, #2]
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001f30:	2301      	movs	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
 8001f34:	e001      	b.n	8001f3a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001f36:	2300      	movs	r3, #0
 8001f38:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3714      	adds	r7, #20
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bc80      	pop	{r7}
 8001f44:	4770      	bx	lr

08001f46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	807b      	strh	r3, [r7, #2]
 8001f52:	4613      	mov	r3, r2
 8001f54:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f56:	787b      	ldrb	r3, [r7, #1]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5c:	887a      	ldrh	r2, [r7, #2]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f62:	e003      	b.n	8001f6c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f64:	887b      	ldrh	r3, [r7, #2]
 8001f66:	041a      	lsls	r2, r3, #16
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	619a      	str	r2, [r3, #24]
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bc80      	pop	{r7}
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e12b      	b.n	80021e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d106      	bne.n	8001fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7ff fbb0 	bl	8001704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2224      	movs	r2, #36	@ 0x24
 8001fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0201 	bic.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fdc:	f001 fa0a 	bl	80033f4 <HAL_RCC_GetPCLK1Freq>
 8001fe0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4a81      	ldr	r2, [pc, #516]	@ (80021ec <HAL_I2C_Init+0x274>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d807      	bhi.n	8001ffc <HAL_I2C_Init+0x84>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	4a80      	ldr	r2, [pc, #512]	@ (80021f0 <HAL_I2C_Init+0x278>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	bf94      	ite	ls
 8001ff4:	2301      	movls	r3, #1
 8001ff6:	2300      	movhi	r3, #0
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	e006      	b.n	800200a <HAL_I2C_Init+0x92>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	4a7d      	ldr	r2, [pc, #500]	@ (80021f4 <HAL_I2C_Init+0x27c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	bf94      	ite	ls
 8002004:	2301      	movls	r3, #1
 8002006:	2300      	movhi	r3, #0
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e0e7      	b.n	80021e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4a78      	ldr	r2, [pc, #480]	@ (80021f8 <HAL_I2C_Init+0x280>)
 8002016:	fba2 2303 	umull	r2, r3, r2, r3
 800201a:	0c9b      	lsrs	r3, r3, #18
 800201c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68ba      	ldr	r2, [r7, #8]
 800202e:	430a      	orrs	r2, r1
 8002030:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	4a6a      	ldr	r2, [pc, #424]	@ (80021ec <HAL_I2C_Init+0x274>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d802      	bhi.n	800204c <HAL_I2C_Init+0xd4>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	3301      	adds	r3, #1
 800204a:	e009      	b.n	8002060 <HAL_I2C_Init+0xe8>
 800204c:	68bb      	ldr	r3, [r7, #8]
 800204e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	4a69      	ldr	r2, [pc, #420]	@ (80021fc <HAL_I2C_Init+0x284>)
 8002058:	fba2 2303 	umull	r2, r3, r2, r3
 800205c:	099b      	lsrs	r3, r3, #6
 800205e:	3301      	adds	r3, #1
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	430b      	orrs	r3, r1
 8002066:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002072:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	495c      	ldr	r1, [pc, #368]	@ (80021ec <HAL_I2C_Init+0x274>)
 800207c:	428b      	cmp	r3, r1
 800207e:	d819      	bhi.n	80020b4 <HAL_I2C_Init+0x13c>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	1e59      	subs	r1, r3, #1
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	fbb1 f3f3 	udiv	r3, r1, r3
 800208e:	1c59      	adds	r1, r3, #1
 8002090:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002094:	400b      	ands	r3, r1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00a      	beq.n	80020b0 <HAL_I2C_Init+0x138>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1e59      	subs	r1, r3, #1
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	005b      	lsls	r3, r3, #1
 80020a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80020a8:	3301      	adds	r3, #1
 80020aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020ae:	e051      	b.n	8002154 <HAL_I2C_Init+0x1dc>
 80020b0:	2304      	movs	r3, #4
 80020b2:	e04f      	b.n	8002154 <HAL_I2C_Init+0x1dc>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d111      	bne.n	80020e0 <HAL_I2C_Init+0x168>
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1e58      	subs	r0, r3, #1
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6859      	ldr	r1, [r3, #4]
 80020c4:	460b      	mov	r3, r1
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	440b      	add	r3, r1
 80020ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ce:	3301      	adds	r3, #1
 80020d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	bf0c      	ite	eq
 80020d8:	2301      	moveq	r3, #1
 80020da:	2300      	movne	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	e012      	b.n	8002106 <HAL_I2C_Init+0x18e>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	1e58      	subs	r0, r3, #1
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6859      	ldr	r1, [r3, #4]
 80020e8:	460b      	mov	r3, r1
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	0099      	lsls	r1, r3, #2
 80020f0:	440b      	add	r3, r1
 80020f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	bf0c      	ite	eq
 8002100:	2301      	moveq	r3, #1
 8002102:	2300      	movne	r3, #0
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <HAL_I2C_Init+0x196>
 800210a:	2301      	movs	r3, #1
 800210c:	e022      	b.n	8002154 <HAL_I2C_Init+0x1dc>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10e      	bne.n	8002134 <HAL_I2C_Init+0x1bc>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	1e58      	subs	r0, r3, #1
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6859      	ldr	r1, [r3, #4]
 800211e:	460b      	mov	r3, r1
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	440b      	add	r3, r1
 8002124:	fbb0 f3f3 	udiv	r3, r0, r3
 8002128:	3301      	adds	r3, #1
 800212a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800212e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002132:	e00f      	b.n	8002154 <HAL_I2C_Init+0x1dc>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	1e58      	subs	r0, r3, #1
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6859      	ldr	r1, [r3, #4]
 800213c:	460b      	mov	r3, r1
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	440b      	add	r3, r1
 8002142:	0099      	lsls	r1, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	fbb0 f3f3 	udiv	r3, r0, r3
 800214a:	3301      	adds	r3, #1
 800214c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002150:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002154:	6879      	ldr	r1, [r7, #4]
 8002156:	6809      	ldr	r1, [r1, #0]
 8002158:	4313      	orrs	r3, r2
 800215a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69da      	ldr	r2, [r3, #28]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002182:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	6911      	ldr	r1, [r2, #16]
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68d2      	ldr	r2, [r2, #12]
 800218e:	4311      	orrs	r1, r2
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	6812      	ldr	r2, [r2, #0]
 8002194:	430b      	orrs	r3, r1
 8002196:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	695a      	ldr	r2, [r3, #20]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	431a      	orrs	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	430a      	orrs	r2, r1
 80021b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f042 0201 	orr.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	000186a0 	.word	0x000186a0
 80021f0:	001e847f 	.word	0x001e847f
 80021f4:	003d08ff 	.word	0x003d08ff
 80021f8:	431bde83 	.word	0x431bde83
 80021fc:	10624dd3 	.word	0x10624dd3

08002200 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b088      	sub	sp, #32
 8002204:	af02      	add	r7, sp, #8
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	607a      	str	r2, [r7, #4]
 800220a:	461a      	mov	r2, r3
 800220c:	460b      	mov	r3, r1
 800220e:	817b      	strh	r3, [r7, #10]
 8002210:	4613      	mov	r3, r2
 8002212:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002214:	f7ff fbd4 	bl	80019c0 <HAL_GetTick>
 8002218:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002220:	b2db      	uxtb	r3, r3
 8002222:	2b20      	cmp	r3, #32
 8002224:	f040 80e0 	bne.w	80023e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	9300      	str	r3, [sp, #0]
 800222c:	2319      	movs	r3, #25
 800222e:	2201      	movs	r2, #1
 8002230:	4970      	ldr	r1, [pc, #448]	@ (80023f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002232:	68f8      	ldr	r0, [r7, #12]
 8002234:	f000 fa92 	bl	800275c <I2C_WaitOnFlagUntilTimeout>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d001      	beq.n	8002242 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800223e:	2302      	movs	r3, #2
 8002240:	e0d3      	b.n	80023ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002248:	2b01      	cmp	r3, #1
 800224a:	d101      	bne.n	8002250 <HAL_I2C_Master_Transmit+0x50>
 800224c:	2302      	movs	r3, #2
 800224e:	e0cc      	b.n	80023ea <HAL_I2C_Master_Transmit+0x1ea>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d007      	beq.n	8002276 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f042 0201 	orr.w	r2, r2, #1
 8002274:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002284:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2221      	movs	r2, #33	@ 0x21
 800228a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2210      	movs	r2, #16
 8002292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	2200      	movs	r2, #0
 800229a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	893a      	ldrh	r2, [r7, #8]
 80022a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4a50      	ldr	r2, [pc, #320]	@ (80023f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80022b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80022b8:	8979      	ldrh	r1, [r7, #10]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	6a3a      	ldr	r2, [r7, #32]
 80022be:	68f8      	ldr	r0, [r7, #12]
 80022c0:	f000 f9ca 	bl	8002658 <I2C_MasterRequestWrite>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e08d      	b.n	80023ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022ce:	2300      	movs	r3, #0
 80022d0:	613b      	str	r3, [r7, #16]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022e4:	e066      	b.n	80023b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	6a39      	ldr	r1, [r7, #32]
 80022ea:	68f8      	ldr	r0, [r7, #12]
 80022ec:	f000 fb50 	bl	8002990 <I2C_WaitOnTXEFlagUntilTimeout>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d00d      	beq.n	8002312 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d107      	bne.n	800230e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800230c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e06b      	b.n	80023ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002316:	781a      	ldrb	r2, [r3, #0]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	f003 0304 	and.w	r3, r3, #4
 800234c:	2b04      	cmp	r3, #4
 800234e:	d11b      	bne.n	8002388 <HAL_I2C_Master_Transmit+0x188>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002354:	2b00      	cmp	r3, #0
 8002356:	d017      	beq.n	8002388 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	1c5a      	adds	r2, r3, #1
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002372:	b29b      	uxth	r3, r3
 8002374:	3b01      	subs	r3, #1
 8002376:	b29a      	uxth	r2, r3
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002380:	3b01      	subs	r3, #1
 8002382:	b29a      	uxth	r2, r3
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	6a39      	ldr	r1, [r7, #32]
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f000 fb47 	bl	8002a20 <I2C_WaitOnBTFFlagUntilTimeout>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00d      	beq.n	80023b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800239c:	2b04      	cmp	r3, #4
 800239e:	d107      	bne.n	80023b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e01a      	b.n	80023ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d194      	bne.n	80022e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2220      	movs	r2, #32
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80023e4:	2300      	movs	r3, #0
 80023e6:	e000      	b.n	80023ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023e8:	2302      	movs	r3, #2
  }
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	00100002 	.word	0x00100002
 80023f8:	ffff0000 	.word	0xffff0000

080023fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b08a      	sub	sp, #40	@ 0x28
 8002400:	af02      	add	r7, sp, #8
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	607a      	str	r2, [r7, #4]
 8002406:	603b      	str	r3, [r7, #0]
 8002408:	460b      	mov	r3, r1
 800240a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 800240c:	f7ff fad8 	bl	80019c0 <HAL_GetTick>
 8002410:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b20      	cmp	r3, #32
 8002420:	f040 8111 	bne.w	8002646 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2319      	movs	r3, #25
 800242a:	2201      	movs	r2, #1
 800242c:	4988      	ldr	r1, [pc, #544]	@ (8002650 <HAL_I2C_IsDeviceReady+0x254>)
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	f000 f994 	bl	800275c <I2C_WaitOnFlagUntilTimeout>
 8002434:	4603      	mov	r3, r0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d001      	beq.n	800243e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800243a:	2302      	movs	r3, #2
 800243c:	e104      	b.n	8002648 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_I2C_IsDeviceReady+0x50>
 8002448:	2302      	movs	r3, #2
 800244a:	e0fd      	b.n	8002648 <HAL_I2C_IsDeviceReady+0x24c>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b01      	cmp	r3, #1
 8002460:	d007      	beq.n	8002472 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f042 0201 	orr.w	r2, r2, #1
 8002470:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002480:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2224      	movs	r2, #36	@ 0x24
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	4a70      	ldr	r2, [pc, #448]	@ (8002654 <HAL_I2C_IsDeviceReady+0x258>)
 8002494:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024a4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2200      	movs	r2, #0
 80024ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80024b2:	68f8      	ldr	r0, [r7, #12]
 80024b4:	f000 f952 	bl	800275c <I2C_WaitOnFlagUntilTimeout>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d00d      	beq.n	80024da <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024cc:	d103      	bne.n	80024d6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024d4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e0b6      	b.n	8002648 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80024da:	897b      	ldrh	r3, [r7, #10]
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	461a      	mov	r2, r3
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80024e8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80024ea:	f7ff fa69 	bl	80019c0 <HAL_GetTick>
 80024ee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	bf0c      	ite	eq
 80024fe:	2301      	moveq	r3, #1
 8002500:	2300      	movne	r3, #0
 8002502:	b2db      	uxtb	r3, r3
 8002504:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002510:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002514:	bf0c      	ite	eq
 8002516:	2301      	moveq	r3, #1
 8002518:	2300      	movne	r3, #0
 800251a:	b2db      	uxtb	r3, r3
 800251c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800251e:	e025      	b.n	800256c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002520:	f7ff fa4e 	bl	80019c0 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d302      	bcc.n	8002536 <HAL_I2C_IsDeviceReady+0x13a>
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d103      	bne.n	800253e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	22a0      	movs	r2, #160	@ 0xa0
 800253a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b02      	cmp	r3, #2
 800254a:	bf0c      	ite	eq
 800254c:	2301      	moveq	r3, #1
 800254e:	2300      	movne	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800255e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002562:	bf0c      	ite	eq
 8002564:	2301      	moveq	r3, #1
 8002566:	2300      	movne	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002572:	b2db      	uxtb	r3, r3
 8002574:	2ba0      	cmp	r3, #160	@ 0xa0
 8002576:	d005      	beq.n	8002584 <HAL_I2C_IsDeviceReady+0x188>
 8002578:	7dfb      	ldrb	r3, [r7, #23]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d102      	bne.n	8002584 <HAL_I2C_IsDeviceReady+0x188>
 800257e:	7dbb      	ldrb	r3, [r7, #22]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d0cd      	beq.n	8002520 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2220      	movs	r2, #32
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b02      	cmp	r3, #2
 8002598:	d129      	bne.n	80025ee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025a8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	2319      	movs	r3, #25
 80025c6:	2201      	movs	r2, #1
 80025c8:	4921      	ldr	r1, [pc, #132]	@ (8002650 <HAL_I2C_IsDeviceReady+0x254>)
 80025ca:	68f8      	ldr	r0, [r7, #12]
 80025cc:	f000 f8c6 	bl	800275c <I2C_WaitOnFlagUntilTimeout>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e036      	b.n	8002648 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2220      	movs	r2, #32
 80025de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80025ea:	2300      	movs	r3, #0
 80025ec:	e02c      	b.n	8002648 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80025fc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002606:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	2319      	movs	r3, #25
 800260e:	2201      	movs	r2, #1
 8002610:	490f      	ldr	r1, [pc, #60]	@ (8002650 <HAL_I2C_IsDeviceReady+0x254>)
 8002612:	68f8      	ldr	r0, [r7, #12]
 8002614:	f000 f8a2 	bl	800275c <I2C_WaitOnFlagUntilTimeout>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e012      	b.n	8002648 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	3301      	adds	r3, #1
 8002626:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	429a      	cmp	r2, r3
 800262e:	f4ff af32 	bcc.w	8002496 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2220      	movs	r2, #32
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e000      	b.n	8002648 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002646:	2302      	movs	r3, #2
  }
}
 8002648:	4618      	mov	r0, r3
 800264a:	3720      	adds	r7, #32
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}
 8002650:	00100002 	.word	0x00100002
 8002654:	ffff0000 	.word	0xffff0000

08002658 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b088      	sub	sp, #32
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	460b      	mov	r3, r1
 8002666:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800266c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2b08      	cmp	r3, #8
 8002672:	d006      	beq.n	8002682 <I2C_MasterRequestWrite+0x2a>
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d003      	beq.n	8002682 <I2C_MasterRequestWrite+0x2a>
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002680:	d108      	bne.n	8002694 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	e00b      	b.n	80026ac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	2b12      	cmp	r3, #18
 800269a:	d107      	bne.n	80026ac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80026aa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	9300      	str	r3, [sp, #0]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80026b8:	68f8      	ldr	r0, [r7, #12]
 80026ba:	f000 f84f 	bl	800275c <I2C_WaitOnFlagUntilTimeout>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d00d      	beq.n	80026e0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80026d2:	d103      	bne.n	80026dc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026da:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e035      	b.n	800274c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80026e8:	d108      	bne.n	80026fc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026ea:	897b      	ldrh	r3, [r7, #10]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	461a      	mov	r2, r3
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80026f8:	611a      	str	r2, [r3, #16]
 80026fa:	e01b      	b.n	8002734 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80026fc:	897b      	ldrh	r3, [r7, #10]
 80026fe:	11db      	asrs	r3, r3, #7
 8002700:	b2db      	uxtb	r3, r3
 8002702:	f003 0306 	and.w	r3, r3, #6
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f063 030f 	orn	r3, r3, #15
 800270c:	b2da      	uxtb	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	490e      	ldr	r1, [pc, #56]	@ (8002754 <I2C_MasterRequestWrite+0xfc>)
 800271a:	68f8      	ldr	r0, [r7, #12]
 800271c:	f000 f898 	bl	8002850 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e010      	b.n	800274c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800272a:	897b      	ldrh	r3, [r7, #10]
 800272c:	b2da      	uxtb	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	4907      	ldr	r1, [pc, #28]	@ (8002758 <I2C_MasterRequestWrite+0x100>)
 800273a:	68f8      	ldr	r0, [r7, #12]
 800273c:	f000 f888 	bl	8002850 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	00010008 	.word	0x00010008
 8002758:	00010002 	.word	0x00010002

0800275c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	603b      	str	r3, [r7, #0]
 8002768:	4613      	mov	r3, r2
 800276a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800276c:	e048      	b.n	8002800 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002774:	d044      	beq.n	8002800 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002776:	f7ff f923 	bl	80019c0 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d302      	bcc.n	800278c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d139      	bne.n	8002800 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	0c1b      	lsrs	r3, r3, #16
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b01      	cmp	r3, #1
 8002794:	d10d      	bne.n	80027b2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	43da      	mvns	r2, r3
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	4013      	ands	r3, r2
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	bf0c      	ite	eq
 80027a8:	2301      	moveq	r3, #1
 80027aa:	2300      	movne	r3, #0
 80027ac:	b2db      	uxtb	r3, r3
 80027ae:	461a      	mov	r2, r3
 80027b0:	e00c      	b.n	80027cc <I2C_WaitOnFlagUntilTimeout+0x70>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	43da      	mvns	r2, r3
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	4013      	ands	r3, r2
 80027be:	b29b      	uxth	r3, r3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	bf0c      	ite	eq
 80027c4:	2301      	moveq	r3, #1
 80027c6:	2300      	movne	r3, #0
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	79fb      	ldrb	r3, [r7, #7]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d116      	bne.n	8002800 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ec:	f043 0220 	orr.w	r2, r3, #32
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e023      	b.n	8002848 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	0c1b      	lsrs	r3, r3, #16
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b01      	cmp	r3, #1
 8002808:	d10d      	bne.n	8002826 <I2C_WaitOnFlagUntilTimeout+0xca>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	695b      	ldr	r3, [r3, #20]
 8002810:	43da      	mvns	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	4013      	ands	r3, r2
 8002816:	b29b      	uxth	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf0c      	ite	eq
 800281c:	2301      	moveq	r3, #1
 800281e:	2300      	movne	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	461a      	mov	r2, r3
 8002824:	e00c      	b.n	8002840 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	699b      	ldr	r3, [r3, #24]
 800282c:	43da      	mvns	r2, r3
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	4013      	ands	r3, r2
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	79fb      	ldrb	r3, [r7, #7]
 8002842:	429a      	cmp	r2, r3
 8002844:	d093      	beq.n	800276e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3710      	adds	r7, #16
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}

08002850 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	60f8      	str	r0, [r7, #12]
 8002858:	60b9      	str	r1, [r7, #8]
 800285a:	607a      	str	r2, [r7, #4]
 800285c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800285e:	e071      	b.n	8002944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	695b      	ldr	r3, [r3, #20]
 8002866:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800286a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800286e:	d123      	bne.n	80028b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800287e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002888:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	f043 0204 	orr.w	r2, r3, #4
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	e067      	b.n	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80028be:	d041      	beq.n	8002944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028c0:	f7ff f87e 	bl	80019c0 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d302      	bcc.n	80028d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d136      	bne.n	8002944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d10c      	bne.n	80028fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	695b      	ldr	r3, [r3, #20]
 80028e6:	43da      	mvns	r2, r3
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	4013      	ands	r3, r2
 80028ec:	b29b      	uxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	bf14      	ite	ne
 80028f2:	2301      	movne	r3, #1
 80028f4:	2300      	moveq	r3, #0
 80028f6:	b2db      	uxtb	r3, r3
 80028f8:	e00b      	b.n	8002912 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	699b      	ldr	r3, [r3, #24]
 8002900:	43da      	mvns	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	4013      	ands	r3, r2
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b00      	cmp	r3, #0
 800290a:	bf14      	ite	ne
 800290c:	2301      	movne	r3, #1
 800290e:	2300      	moveq	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d016      	beq.n	8002944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	f043 0220 	orr.w	r2, r3, #32
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e021      	b.n	8002988 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	0c1b      	lsrs	r3, r3, #16
 8002948:	b2db      	uxtb	r3, r3
 800294a:	2b01      	cmp	r3, #1
 800294c:	d10c      	bne.n	8002968 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	43da      	mvns	r2, r3
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	4013      	ands	r3, r2
 800295a:	b29b      	uxth	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	bf14      	ite	ne
 8002960:	2301      	movne	r3, #1
 8002962:	2300      	moveq	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	e00b      	b.n	8002980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	43da      	mvns	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4013      	ands	r3, r2
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	bf14      	ite	ne
 800297a:	2301      	movne	r3, #1
 800297c:	2300      	moveq	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	f47f af6d 	bne.w	8002860 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3710      	adds	r7, #16
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800299c:	e034      	b.n	8002a08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f886 	bl	8002ab0 <I2C_IsAcknowledgeFailed>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e034      	b.n	8002a18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80029b4:	d028      	beq.n	8002a08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029b6:	f7ff f803 	bl	80019c0 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d302      	bcc.n	80029cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d11d      	bne.n	8002a08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029d6:	2b80      	cmp	r3, #128	@ 0x80
 80029d8:	d016      	beq.n	8002a08 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	f043 0220 	orr.w	r2, r3, #32
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e007      	b.n	8002a18 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a12:	2b80      	cmp	r3, #128	@ 0x80
 8002a14:	d1c3      	bne.n	800299e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002a16:	2300      	movs	r3, #0
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a2c:	e034      	b.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f83e 	bl	8002ab0 <I2C_IsAcknowledgeFailed>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e034      	b.n	8002aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a44:	d028      	beq.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a46:	f7fe ffbb 	bl	80019c0 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	68ba      	ldr	r2, [r7, #8]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d302      	bcc.n	8002a5c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d11d      	bne.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d016      	beq.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e007      	b.n	8002aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	695b      	ldr	r3, [r3, #20]
 8002a9e:	f003 0304 	and.w	r3, r3, #4
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d1c3      	bne.n	8002a2e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ac6:	d11b      	bne.n	8002b00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002ad0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2220      	movs	r2, #32
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aec:	f043 0204 	orr.w	r2, r3, #4
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bc80      	pop	{r7}
 8002b0a:	4770      	bx	lr

08002b0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e267      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d075      	beq.n	8002c16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b2a:	4b88      	ldr	r3, [pc, #544]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d00c      	beq.n	8002b50 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b36:	4b85      	ldr	r3, [pc, #532]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b3e:	2b08      	cmp	r3, #8
 8002b40:	d112      	bne.n	8002b68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b42:	4b82      	ldr	r3, [pc, #520]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b4e:	d10b      	bne.n	8002b68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b50:	4b7e      	ldr	r3, [pc, #504]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d05b      	beq.n	8002c14 <HAL_RCC_OscConfig+0x108>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d157      	bne.n	8002c14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e242      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b70:	d106      	bne.n	8002b80 <HAL_RCC_OscConfig+0x74>
 8002b72:	4b76      	ldr	r3, [pc, #472]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a75      	ldr	r2, [pc, #468]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	e01d      	b.n	8002bbc <HAL_RCC_OscConfig+0xb0>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x98>
 8002b8a:	4b70      	ldr	r3, [pc, #448]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a6f      	ldr	r2, [pc, #444]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	4b6d      	ldr	r3, [pc, #436]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a6c      	ldr	r2, [pc, #432]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e00b      	b.n	8002bbc <HAL_RCC_OscConfig+0xb0>
 8002ba4:	4b69      	ldr	r3, [pc, #420]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a68      	ldr	r2, [pc, #416]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002baa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bae:	6013      	str	r3, [r2, #0]
 8002bb0:	4b66      	ldr	r3, [pc, #408]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a65      	ldr	r2, [pc, #404]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002bb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d013      	beq.n	8002bec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7fe fefc 	bl	80019c0 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bcc:	f7fe fef8 	bl	80019c0 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	@ 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e207      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bde:	4b5b      	ldr	r3, [pc, #364]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d0f0      	beq.n	8002bcc <HAL_RCC_OscConfig+0xc0>
 8002bea:	e014      	b.n	8002c16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7fe fee8 	bl	80019c0 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf4:	f7fe fee4 	bl	80019c0 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b64      	cmp	r3, #100	@ 0x64
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e1f3      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c06:	4b51      	ldr	r3, [pc, #324]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xe8>
 8002c12:	e000      	b.n	8002c16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0302 	and.w	r3, r3, #2
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d063      	beq.n	8002cea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c22:	4b4a      	ldr	r3, [pc, #296]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c2e:	4b47      	ldr	r3, [pc, #284]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c36:	2b08      	cmp	r3, #8
 8002c38:	d11c      	bne.n	8002c74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c3a:	4b44      	ldr	r3, [pc, #272]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d116      	bne.n	8002c74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c46:	4b41      	ldr	r3, [pc, #260]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d005      	beq.n	8002c5e <HAL_RCC_OscConfig+0x152>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d001      	beq.n	8002c5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e1c7      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4937      	ldr	r1, [pc, #220]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c72:	e03a      	b.n	8002cea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d020      	beq.n	8002cbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c7c:	4b34      	ldr	r3, [pc, #208]	@ (8002d50 <HAL_RCC_OscConfig+0x244>)
 8002c7e:	2201      	movs	r2, #1
 8002c80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c82:	f7fe fe9d 	bl	80019c0 <HAL_GetTick>
 8002c86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c88:	e008      	b.n	8002c9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c8a:	f7fe fe99 	bl	80019c0 <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e1a8      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0f0      	beq.n	8002c8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca8:	4b28      	ldr	r3, [pc, #160]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	00db      	lsls	r3, r3, #3
 8002cb6:	4925      	ldr	r1, [pc, #148]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	600b      	str	r3, [r1, #0]
 8002cbc:	e015      	b.n	8002cea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cbe:	4b24      	ldr	r3, [pc, #144]	@ (8002d50 <HAL_RCC_OscConfig+0x244>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe fe7c 	bl	80019c0 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ccc:	f7fe fe78 	bl	80019c0 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e187      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cde:	4b1b      	ldr	r3, [pc, #108]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d036      	beq.n	8002d64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d016      	beq.n	8002d2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cfe:	4b15      	ldr	r3, [pc, #84]	@ (8002d54 <HAL_RCC_OscConfig+0x248>)
 8002d00:	2201      	movs	r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d04:	f7fe fe5c 	bl	80019c0 <HAL_GetTick>
 8002d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	e008      	b.n	8002d1e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d0c:	f7fe fe58 	bl	80019c0 <HAL_GetTick>
 8002d10:	4602      	mov	r2, r0
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	1ad3      	subs	r3, r2, r3
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d901      	bls.n	8002d1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d1a:	2303      	movs	r3, #3
 8002d1c:	e167      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d4c <HAL_RCC_OscConfig+0x240>)
 8002d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d22:	f003 0302 	and.w	r3, r3, #2
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d0f0      	beq.n	8002d0c <HAL_RCC_OscConfig+0x200>
 8002d2a:	e01b      	b.n	8002d64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d2c:	4b09      	ldr	r3, [pc, #36]	@ (8002d54 <HAL_RCC_OscConfig+0x248>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d32:	f7fe fe45 	bl	80019c0 <HAL_GetTick>
 8002d36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d38:	e00e      	b.n	8002d58 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d3a:	f7fe fe41 	bl	80019c0 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	2b02      	cmp	r3, #2
 8002d46:	d907      	bls.n	8002d58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e150      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	42470000 	.word	0x42470000
 8002d54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d58:	4b88      	ldr	r3, [pc, #544]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1ea      	bne.n	8002d3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 8097 	beq.w	8002ea0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d72:	2300      	movs	r3, #0
 8002d74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d76:	4b81      	ldr	r3, [pc, #516]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10f      	bne.n	8002da2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d82:	2300      	movs	r3, #0
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	4b7d      	ldr	r3, [pc, #500]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8a:	4a7c      	ldr	r2, [pc, #496]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002d8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d92:	4b7a      	ldr	r3, [pc, #488]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	60bb      	str	r3, [r7, #8]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002da2:	4b77      	ldr	r3, [pc, #476]	@ (8002f80 <HAL_RCC_OscConfig+0x474>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d118      	bne.n	8002de0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dae:	4b74      	ldr	r3, [pc, #464]	@ (8002f80 <HAL_RCC_OscConfig+0x474>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a73      	ldr	r2, [pc, #460]	@ (8002f80 <HAL_RCC_OscConfig+0x474>)
 8002db4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002db8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dba:	f7fe fe01 	bl	80019c0 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc2:	f7fe fdfd 	bl	80019c0 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e10c      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd4:	4b6a      	ldr	r3, [pc, #424]	@ (8002f80 <HAL_RCC_OscConfig+0x474>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d0f0      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d106      	bne.n	8002df6 <HAL_RCC_OscConfig+0x2ea>
 8002de8:	4b64      	ldr	r3, [pc, #400]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dec:	4a63      	ldr	r2, [pc, #396]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002df4:	e01c      	b.n	8002e30 <HAL_RCC_OscConfig+0x324>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	689b      	ldr	r3, [r3, #8]
 8002dfa:	2b05      	cmp	r3, #5
 8002dfc:	d10c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x30c>
 8002dfe:	4b5f      	ldr	r3, [pc, #380]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e02:	4a5e      	ldr	r2, [pc, #376]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e04:	f043 0304 	orr.w	r3, r3, #4
 8002e08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e0a:	4b5c      	ldr	r3, [pc, #368]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0e:	4a5b      	ldr	r2, [pc, #364]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e16:	e00b      	b.n	8002e30 <HAL_RCC_OscConfig+0x324>
 8002e18:	4b58      	ldr	r3, [pc, #352]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1c:	4a57      	ldr	r2, [pc, #348]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e1e:	f023 0301 	bic.w	r3, r3, #1
 8002e22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e24:	4b55      	ldr	r3, [pc, #340]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e28:	4a54      	ldr	r2, [pc, #336]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e2a:	f023 0304 	bic.w	r3, r3, #4
 8002e2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d015      	beq.n	8002e64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e38:	f7fe fdc2 	bl	80019c0 <HAL_GetTick>
 8002e3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e3e:	e00a      	b.n	8002e56 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e40:	f7fe fdbe 	bl	80019c0 <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e0cb      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e56:	4b49      	ldr	r3, [pc, #292]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e5a:	f003 0302 	and.w	r3, r3, #2
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0ee      	beq.n	8002e40 <HAL_RCC_OscConfig+0x334>
 8002e62:	e014      	b.n	8002e8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e64:	f7fe fdac 	bl	80019c0 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e6a:	e00a      	b.n	8002e82 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e6c:	f7fe fda8 	bl	80019c0 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e0b5      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e82:	4b3e      	ldr	r3, [pc, #248]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1ee      	bne.n	8002e6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e8e:	7dfb      	ldrb	r3, [r7, #23]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e94:	4b39      	ldr	r3, [pc, #228]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e98:	4a38      	ldr	r2, [pc, #224]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002e9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f000 80a1 	beq.w	8002fec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eaa:	4b34      	ldr	r3, [pc, #208]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 030c 	and.w	r3, r3, #12
 8002eb2:	2b08      	cmp	r3, #8
 8002eb4:	d05c      	beq.n	8002f70 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d141      	bne.n	8002f42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ebe:	4b31      	ldr	r3, [pc, #196]	@ (8002f84 <HAL_RCC_OscConfig+0x478>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec4:	f7fe fd7c 	bl	80019c0 <HAL_GetTick>
 8002ec8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eca:	e008      	b.n	8002ede <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ecc:	f7fe fd78 	bl	80019c0 <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d901      	bls.n	8002ede <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002eda:	2303      	movs	r3, #3
 8002edc:	e087      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ede:	4b27      	ldr	r3, [pc, #156]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1f0      	bne.n	8002ecc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	69da      	ldr	r2, [r3, #28]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	431a      	orrs	r2, r3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	019b      	lsls	r3, r3, #6
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f00:	085b      	lsrs	r3, r3, #1
 8002f02:	3b01      	subs	r3, #1
 8002f04:	041b      	lsls	r3, r3, #16
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f0c:	061b      	lsls	r3, r3, #24
 8002f0e:	491b      	ldr	r1, [pc, #108]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f14:	4b1b      	ldr	r3, [pc, #108]	@ (8002f84 <HAL_RCC_OscConfig+0x478>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7fe fd51 	bl	80019c0 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f22:	f7fe fd4d 	bl	80019c0 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e05c      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f34:	4b11      	ldr	r3, [pc, #68]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d0f0      	beq.n	8002f22 <HAL_RCC_OscConfig+0x416>
 8002f40:	e054      	b.n	8002fec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f42:	4b10      	ldr	r3, [pc, #64]	@ (8002f84 <HAL_RCC_OscConfig+0x478>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f48:	f7fe fd3a 	bl	80019c0 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fe fd36 	bl	80019c0 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e045      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f62:	4b06      	ldr	r3, [pc, #24]	@ (8002f7c <HAL_RCC_OscConfig+0x470>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_OscConfig+0x444>
 8002f6e:	e03d      	b.n	8002fec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	699b      	ldr	r3, [r3, #24]
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d107      	bne.n	8002f88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e038      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40007000 	.word	0x40007000
 8002f84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f88:	4b1b      	ldr	r3, [pc, #108]	@ (8002ff8 <HAL_RCC_OscConfig+0x4ec>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d028      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d121      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d11a      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fb2:	68fa      	ldr	r2, [r7, #12]
 8002fb4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fb8:	4013      	ands	r3, r2
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d111      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fce:	085b      	lsrs	r3, r3, #1
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d107      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fe2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d001      	beq.n	8002fec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e000      	b.n	8002fee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3718      	adds	r7, #24
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	40023800 	.word	0x40023800

08002ffc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b084      	sub	sp, #16
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d101      	bne.n	8003010 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0cc      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003010:	4b68      	ldr	r3, [pc, #416]	@ (80031b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0307 	and.w	r3, r3, #7
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	429a      	cmp	r2, r3
 800301c:	d90c      	bls.n	8003038 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800301e:	4b65      	ldr	r3, [pc, #404]	@ (80031b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003020:	683a      	ldr	r2, [r7, #0]
 8003022:	b2d2      	uxtb	r2, r2
 8003024:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003026:	4b63      	ldr	r3, [pc, #396]	@ (80031b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	683a      	ldr	r2, [r7, #0]
 8003030:	429a      	cmp	r2, r3
 8003032:	d001      	beq.n	8003038 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0b8      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0302 	and.w	r3, r3, #2
 8003040:	2b00      	cmp	r3, #0
 8003042:	d020      	beq.n	8003086 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0304 	and.w	r3, r3, #4
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003050:	4b59      	ldr	r3, [pc, #356]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	4a58      	ldr	r2, [pc, #352]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003056:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800305a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d005      	beq.n	8003074 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003068:	4b53      	ldr	r3, [pc, #332]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	4a52      	ldr	r2, [pc, #328]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800306e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003072:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003074:	4b50      	ldr	r3, [pc, #320]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	494d      	ldr	r1, [pc, #308]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003082:	4313      	orrs	r3, r2
 8003084:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d044      	beq.n	800311c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d107      	bne.n	80030aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800309a:	4b47      	ldr	r3, [pc, #284]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d119      	bne.n	80030da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e07f      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d003      	beq.n	80030ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d107      	bne.n	80030ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030ba:	4b3f      	ldr	r3, [pc, #252]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d109      	bne.n	80030da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	e06f      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ca:	4b3b      	ldr	r3, [pc, #236]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0302 	and.w	r3, r3, #2
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d101      	bne.n	80030da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e067      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030da:	4b37      	ldr	r3, [pc, #220]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f023 0203 	bic.w	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	4934      	ldr	r1, [pc, #208]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030ec:	f7fe fc68 	bl	80019c0 <HAL_GetTick>
 80030f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030f2:	e00a      	b.n	800310a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030f4:	f7fe fc64 	bl	80019c0 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003102:	4293      	cmp	r3, r2
 8003104:	d901      	bls.n	800310a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e04f      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310a:	4b2b      	ldr	r3, [pc, #172]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	f003 020c 	and.w	r2, r3, #12
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	429a      	cmp	r2, r3
 800311a:	d1eb      	bne.n	80030f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800311c:	4b25      	ldr	r3, [pc, #148]	@ (80031b4 <HAL_RCC_ClockConfig+0x1b8>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	683a      	ldr	r2, [r7, #0]
 8003126:	429a      	cmp	r2, r3
 8003128:	d20c      	bcs.n	8003144 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800312a:	4b22      	ldr	r3, [pc, #136]	@ (80031b4 <HAL_RCC_ClockConfig+0x1b8>)
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	b2d2      	uxtb	r2, r2
 8003130:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003132:	4b20      	ldr	r3, [pc, #128]	@ (80031b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	683a      	ldr	r2, [r7, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d001      	beq.n	8003144 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e032      	b.n	80031aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0304 	and.w	r3, r3, #4
 800314c:	2b00      	cmp	r3, #0
 800314e:	d008      	beq.n	8003162 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003150:	4b19      	ldr	r3, [pc, #100]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	4916      	ldr	r1, [pc, #88]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800315e:	4313      	orrs	r3, r2
 8003160:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d009      	beq.n	8003182 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800316e:	4b12      	ldr	r3, [pc, #72]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	490e      	ldr	r1, [pc, #56]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800317e:	4313      	orrs	r3, r2
 8003180:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003182:	f000 f821 	bl	80031c8 <HAL_RCC_GetSysClockFreq>
 8003186:	4602      	mov	r2, r0
 8003188:	4b0b      	ldr	r3, [pc, #44]	@ (80031b8 <HAL_RCC_ClockConfig+0x1bc>)
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 030f 	and.w	r3, r3, #15
 8003192:	490a      	ldr	r1, [pc, #40]	@ (80031bc <HAL_RCC_ClockConfig+0x1c0>)
 8003194:	5ccb      	ldrb	r3, [r1, r3]
 8003196:	fa22 f303 	lsr.w	r3, r2, r3
 800319a:	4a09      	ldr	r2, [pc, #36]	@ (80031c0 <HAL_RCC_ClockConfig+0x1c4>)
 800319c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800319e:	4b09      	ldr	r3, [pc, #36]	@ (80031c4 <HAL_RCC_ClockConfig+0x1c8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fe fbca 	bl	800193c <HAL_InitTick>

  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023c00 	.word	0x40023c00
 80031b8:	40023800 	.word	0x40023800
 80031bc:	08004450 	.word	0x08004450
 80031c0:	20000000 	.word	0x20000000
 80031c4:	20000004 	.word	0x20000004

080031c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031cc:	b094      	sub	sp, #80	@ 0x50
 80031ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031e0:	4b7c      	ldr	r3, [pc, #496]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x20c>)
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 030c 	and.w	r3, r3, #12
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d00d      	beq.n	8003208 <HAL_RCC_GetSysClockFreq+0x40>
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	f200 80e7 	bhi.w	80033c0 <HAL_RCC_GetSysClockFreq+0x1f8>
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d002      	beq.n	80031fc <HAL_RCC_GetSysClockFreq+0x34>
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d003      	beq.n	8003202 <HAL_RCC_GetSysClockFreq+0x3a>
 80031fa:	e0e1      	b.n	80033c0 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031fc:	4b76      	ldr	r3, [pc, #472]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x210>)
 80031fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003200:	e0e1      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003202:	4b76      	ldr	r3, [pc, #472]	@ (80033dc <HAL_RCC_GetSysClockFreq+0x214>)
 8003204:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003206:	e0de      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003208:	4b72      	ldr	r3, [pc, #456]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x20c>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003210:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003212:	4b70      	ldr	r3, [pc, #448]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d065      	beq.n	80032ea <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800321e:	4b6d      	ldr	r3, [pc, #436]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	099b      	lsrs	r3, r3, #6
 8003224:	2200      	movs	r2, #0
 8003226:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003228:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800322a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800322c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003230:	633b      	str	r3, [r7, #48]	@ 0x30
 8003232:	2300      	movs	r3, #0
 8003234:	637b      	str	r3, [r7, #52]	@ 0x34
 8003236:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800323a:	4622      	mov	r2, r4
 800323c:	462b      	mov	r3, r5
 800323e:	f04f 0000 	mov.w	r0, #0
 8003242:	f04f 0100 	mov.w	r1, #0
 8003246:	0159      	lsls	r1, r3, #5
 8003248:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800324c:	0150      	lsls	r0, r2, #5
 800324e:	4602      	mov	r2, r0
 8003250:	460b      	mov	r3, r1
 8003252:	4621      	mov	r1, r4
 8003254:	1a51      	subs	r1, r2, r1
 8003256:	6139      	str	r1, [r7, #16]
 8003258:	4629      	mov	r1, r5
 800325a:	eb63 0301 	sbc.w	r3, r3, r1
 800325e:	617b      	str	r3, [r7, #20]
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800326c:	4659      	mov	r1, fp
 800326e:	018b      	lsls	r3, r1, #6
 8003270:	4651      	mov	r1, sl
 8003272:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003276:	4651      	mov	r1, sl
 8003278:	018a      	lsls	r2, r1, #6
 800327a:	46d4      	mov	ip, sl
 800327c:	ebb2 080c 	subs.w	r8, r2, ip
 8003280:	4659      	mov	r1, fp
 8003282:	eb63 0901 	sbc.w	r9, r3, r1
 8003286:	f04f 0200 	mov.w	r2, #0
 800328a:	f04f 0300 	mov.w	r3, #0
 800328e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003292:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003296:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800329a:	4690      	mov	r8, r2
 800329c:	4699      	mov	r9, r3
 800329e:	4623      	mov	r3, r4
 80032a0:	eb18 0303 	adds.w	r3, r8, r3
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	462b      	mov	r3, r5
 80032a8:	eb49 0303 	adc.w	r3, r9, r3
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	f04f 0300 	mov.w	r3, #0
 80032b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032ba:	4629      	mov	r1, r5
 80032bc:	024b      	lsls	r3, r1, #9
 80032be:	4620      	mov	r0, r4
 80032c0:	4629      	mov	r1, r5
 80032c2:	4604      	mov	r4, r0
 80032c4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 80032c8:	4601      	mov	r1, r0
 80032ca:	024a      	lsls	r2, r1, #9
 80032cc:	4610      	mov	r0, r2
 80032ce:	4619      	mov	r1, r3
 80032d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032d2:	2200      	movs	r2, #0
 80032d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032dc:	f7fd fc10 	bl	8000b00 <__aeabi_uldivmod>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4613      	mov	r3, r2
 80032e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032e8:	e05c      	b.n	80033a4 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ea:	4b3a      	ldr	r3, [pc, #232]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x20c>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	099b      	lsrs	r3, r3, #6
 80032f0:	2200      	movs	r2, #0
 80032f2:	4618      	mov	r0, r3
 80032f4:	4611      	mov	r1, r2
 80032f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032fa:	623b      	str	r3, [r7, #32]
 80032fc:	2300      	movs	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8003300:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003304:	4642      	mov	r2, r8
 8003306:	464b      	mov	r3, r9
 8003308:	f04f 0000 	mov.w	r0, #0
 800330c:	f04f 0100 	mov.w	r1, #0
 8003310:	0159      	lsls	r1, r3, #5
 8003312:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003316:	0150      	lsls	r0, r2, #5
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	46c4      	mov	ip, r8
 800331e:	ebb2 0a0c 	subs.w	sl, r2, ip
 8003322:	4640      	mov	r0, r8
 8003324:	4649      	mov	r1, r9
 8003326:	468c      	mov	ip, r1
 8003328:	eb63 0b0c 	sbc.w	fp, r3, ip
 800332c:	f04f 0200 	mov.w	r2, #0
 8003330:	f04f 0300 	mov.w	r3, #0
 8003334:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003338:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800333c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003340:	ebb2 040a 	subs.w	r4, r2, sl
 8003344:	eb63 050b 	sbc.w	r5, r3, fp
 8003348:	f04f 0200 	mov.w	r2, #0
 800334c:	f04f 0300 	mov.w	r3, #0
 8003350:	00eb      	lsls	r3, r5, #3
 8003352:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003356:	00e2      	lsls	r2, r4, #3
 8003358:	4614      	mov	r4, r2
 800335a:	461d      	mov	r5, r3
 800335c:	4603      	mov	r3, r0
 800335e:	18e3      	adds	r3, r4, r3
 8003360:	603b      	str	r3, [r7, #0]
 8003362:	460b      	mov	r3, r1
 8003364:	eb45 0303 	adc.w	r3, r5, r3
 8003368:	607b      	str	r3, [r7, #4]
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003376:	4629      	mov	r1, r5
 8003378:	028b      	lsls	r3, r1, #10
 800337a:	4620      	mov	r0, r4
 800337c:	4629      	mov	r1, r5
 800337e:	4604      	mov	r4, r0
 8003380:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8003384:	4601      	mov	r1, r0
 8003386:	028a      	lsls	r2, r1, #10
 8003388:	4610      	mov	r0, r2
 800338a:	4619      	mov	r1, r3
 800338c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800338e:	2200      	movs	r2, #0
 8003390:	61bb      	str	r3, [r7, #24]
 8003392:	61fa      	str	r2, [r7, #28]
 8003394:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003398:	f7fd fbb2 	bl	8000b00 <__aeabi_uldivmod>
 800339c:	4602      	mov	r2, r0
 800339e:	460b      	mov	r3, r1
 80033a0:	4613      	mov	r3, r2
 80033a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80033a4:	4b0b      	ldr	r3, [pc, #44]	@ (80033d4 <HAL_RCC_GetSysClockFreq+0x20c>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	0c1b      	lsrs	r3, r3, #16
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	3301      	adds	r3, #1
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80033b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033be:	e002      	b.n	80033c6 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033c0:	4b05      	ldr	r3, [pc, #20]	@ (80033d8 <HAL_RCC_GetSysClockFreq+0x210>)
 80033c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80033c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3750      	adds	r7, #80	@ 0x50
 80033cc:	46bd      	mov	sp, r7
 80033ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800
 80033d8:	00f42400 	.word	0x00f42400
 80033dc:	007a1200 	.word	0x007a1200

080033e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033e4:	4b02      	ldr	r3, [pc, #8]	@ (80033f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr
 80033f0:	20000000 	.word	0x20000000

080033f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033f8:	f7ff fff2 	bl	80033e0 <HAL_RCC_GetHCLKFreq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	0a9b      	lsrs	r3, r3, #10
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	4903      	ldr	r1, [pc, #12]	@ (8003418 <HAL_RCC_GetPCLK1Freq+0x24>)
 800340a:	5ccb      	ldrb	r3, [r1, r3]
 800340c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003410:	4618      	mov	r0, r3
 8003412:	bd80      	pop	{r7, pc}
 8003414:	40023800 	.word	0x40023800
 8003418:	08004460 	.word	0x08004460

0800341c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e041      	b.n	80034b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d106      	bne.n	8003448 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fe f9a6 	bl	8001794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	3304      	adds	r3, #4
 8003458:	4619      	mov	r1, r3
 800345a:	4610      	mov	r0, r2
 800345c:	f000 f95c 	bl	8003718 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2201      	movs	r2, #1
 8003484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d001      	beq.n	80034d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e046      	b.n	8003562 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a22      	ldr	r2, [pc, #136]	@ (800356c <HAL_TIM_Base_Start+0xb0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d022      	beq.n	800352c <HAL_TIM_Base_Start+0x70>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ee:	d01d      	beq.n	800352c <HAL_TIM_Base_Start+0x70>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a1e      	ldr	r2, [pc, #120]	@ (8003570 <HAL_TIM_Base_Start+0xb4>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d018      	beq.n	800352c <HAL_TIM_Base_Start+0x70>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a1d      	ldr	r2, [pc, #116]	@ (8003574 <HAL_TIM_Base_Start+0xb8>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d013      	beq.n	800352c <HAL_TIM_Base_Start+0x70>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a1b      	ldr	r2, [pc, #108]	@ (8003578 <HAL_TIM_Base_Start+0xbc>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d00e      	beq.n	800352c <HAL_TIM_Base_Start+0x70>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a1a      	ldr	r2, [pc, #104]	@ (800357c <HAL_TIM_Base_Start+0xc0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d009      	beq.n	800352c <HAL_TIM_Base_Start+0x70>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a18      	ldr	r2, [pc, #96]	@ (8003580 <HAL_TIM_Base_Start+0xc4>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d004      	beq.n	800352c <HAL_TIM_Base_Start+0x70>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a17      	ldr	r2, [pc, #92]	@ (8003584 <HAL_TIM_Base_Start+0xc8>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d111      	bne.n	8003550 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b06      	cmp	r3, #6
 800353c:	d010      	beq.n	8003560 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0201 	orr.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800354e:	e007      	b.n	8003560 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f042 0201 	orr.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	bc80      	pop	{r7}
 800356a:	4770      	bx	lr
 800356c:	40010000 	.word	0x40010000
 8003570:	40000400 	.word	0x40000400
 8003574:	40000800 	.word	0x40000800
 8003578:	40000c00 	.word	0x40000c00
 800357c:	40010400 	.word	0x40010400
 8003580:	40014000 	.word	0x40014000
 8003584:	40001800 	.word	0x40001800

08003588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_TIM_ConfigClockSource+0x1c>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e0b4      	b.n	800370e <HAL_TIM_ConfigClockSource+0x186>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2202      	movs	r2, #2
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80035c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80035ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68ba      	ldr	r2, [r7, #8]
 80035d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035dc:	d03e      	beq.n	800365c <HAL_TIM_ConfigClockSource+0xd4>
 80035de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035e2:	f200 8087 	bhi.w	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 80035e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035ea:	f000 8086 	beq.w	80036fa <HAL_TIM_ConfigClockSource+0x172>
 80035ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f2:	d87f      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 80035f4:	2b70      	cmp	r3, #112	@ 0x70
 80035f6:	d01a      	beq.n	800362e <HAL_TIM_ConfigClockSource+0xa6>
 80035f8:	2b70      	cmp	r3, #112	@ 0x70
 80035fa:	d87b      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 80035fc:	2b60      	cmp	r3, #96	@ 0x60
 80035fe:	d050      	beq.n	80036a2 <HAL_TIM_ConfigClockSource+0x11a>
 8003600:	2b60      	cmp	r3, #96	@ 0x60
 8003602:	d877      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003604:	2b50      	cmp	r3, #80	@ 0x50
 8003606:	d03c      	beq.n	8003682 <HAL_TIM_ConfigClockSource+0xfa>
 8003608:	2b50      	cmp	r3, #80	@ 0x50
 800360a:	d873      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 800360c:	2b40      	cmp	r3, #64	@ 0x40
 800360e:	d058      	beq.n	80036c2 <HAL_TIM_ConfigClockSource+0x13a>
 8003610:	2b40      	cmp	r3, #64	@ 0x40
 8003612:	d86f      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003614:	2b30      	cmp	r3, #48	@ 0x30
 8003616:	d064      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003618:	2b30      	cmp	r3, #48	@ 0x30
 800361a:	d86b      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 800361c:	2b20      	cmp	r3, #32
 800361e:	d060      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003620:	2b20      	cmp	r3, #32
 8003622:	d867      	bhi.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
 8003624:	2b00      	cmp	r3, #0
 8003626:	d05c      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x15a>
 8003628:	2b10      	cmp	r3, #16
 800362a:	d05a      	beq.n	80036e2 <HAL_TIM_ConfigClockSource+0x15a>
 800362c:	e062      	b.n	80036f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800363e:	f000 f98c 	bl	800395a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003650:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	609a      	str	r2, [r3, #8]
      break;
 800365a:	e04f      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800366c:	f000 f975 	bl	800395a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800367e:	609a      	str	r2, [r3, #8]
      break;
 8003680:	e03c      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800368e:	461a      	mov	r2, r3
 8003690:	f000 f8ec 	bl	800386c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2150      	movs	r1, #80	@ 0x50
 800369a:	4618      	mov	r0, r3
 800369c:	f000 f943 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 80036a0:	e02c      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80036ae:	461a      	mov	r2, r3
 80036b0:	f000 f90a 	bl	80038c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2160      	movs	r1, #96	@ 0x60
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 f933 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 80036c0:	e01c      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036ce:	461a      	mov	r2, r3
 80036d0:	f000 f8cc 	bl	800386c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2140      	movs	r1, #64	@ 0x40
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 f923 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 80036e0:	e00c      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4619      	mov	r1, r3
 80036ec:	4610      	mov	r0, r2
 80036ee:	f000 f91a 	bl	8003926 <TIM_ITRx_SetConfig>
      break;
 80036f2:	e003      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	73fb      	strb	r3, [r7, #15]
      break;
 80036f8:	e000      	b.n	80036fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80036fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800370c:	7bfb      	ldrb	r3, [r7, #15]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}
	...

08003718 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a45      	ldr	r2, [pc, #276]	@ (8003840 <TIM_Base_SetConfig+0x128>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d013      	beq.n	8003758 <TIM_Base_SetConfig+0x40>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003736:	d00f      	beq.n	8003758 <TIM_Base_SetConfig+0x40>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a42      	ldr	r2, [pc, #264]	@ (8003844 <TIM_Base_SetConfig+0x12c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00b      	beq.n	8003758 <TIM_Base_SetConfig+0x40>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a41      	ldr	r2, [pc, #260]	@ (8003848 <TIM_Base_SetConfig+0x130>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d007      	beq.n	8003758 <TIM_Base_SetConfig+0x40>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a40      	ldr	r2, [pc, #256]	@ (800384c <TIM_Base_SetConfig+0x134>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_Base_SetConfig+0x40>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a3f      	ldr	r2, [pc, #252]	@ (8003850 <TIM_Base_SetConfig+0x138>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d108      	bne.n	800376a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800375e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a34      	ldr	r2, [pc, #208]	@ (8003840 <TIM_Base_SetConfig+0x128>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d02b      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003778:	d027      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a31      	ldr	r2, [pc, #196]	@ (8003844 <TIM_Base_SetConfig+0x12c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d023      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a30      	ldr	r2, [pc, #192]	@ (8003848 <TIM_Base_SetConfig+0x130>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d01f      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a2f      	ldr	r2, [pc, #188]	@ (800384c <TIM_Base_SetConfig+0x134>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d01b      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a2e      	ldr	r2, [pc, #184]	@ (8003850 <TIM_Base_SetConfig+0x138>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d017      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a2d      	ldr	r2, [pc, #180]	@ (8003854 <TIM_Base_SetConfig+0x13c>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d013      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a2c      	ldr	r2, [pc, #176]	@ (8003858 <TIM_Base_SetConfig+0x140>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00f      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a2b      	ldr	r2, [pc, #172]	@ (800385c <TIM_Base_SetConfig+0x144>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d00b      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003860 <TIM_Base_SetConfig+0x148>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d007      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a29      	ldr	r2, [pc, #164]	@ (8003864 <TIM_Base_SetConfig+0x14c>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d003      	beq.n	80037ca <TIM_Base_SetConfig+0xb2>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a28      	ldr	r2, [pc, #160]	@ (8003868 <TIM_Base_SetConfig+0x150>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d108      	bne.n	80037dc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68fa      	ldr	r2, [r7, #12]
 80037ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a0f      	ldr	r2, [pc, #60]	@ (8003840 <TIM_Base_SetConfig+0x128>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d003      	beq.n	8003810 <TIM_Base_SetConfig+0xf8>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a11      	ldr	r2, [pc, #68]	@ (8003850 <TIM_Base_SetConfig+0x138>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d103      	bne.n	8003818 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b01      	cmp	r3, #1
 8003828:	d105      	bne.n	8003836 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f023 0201 	bic.w	r2, r3, #1
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	611a      	str	r2, [r3, #16]
  }
}
 8003836:	bf00      	nop
 8003838:	3714      	adds	r7, #20
 800383a:	46bd      	mov	sp, r7
 800383c:	bc80      	pop	{r7}
 800383e:	4770      	bx	lr
 8003840:	40010000 	.word	0x40010000
 8003844:	40000400 	.word	0x40000400
 8003848:	40000800 	.word	0x40000800
 800384c:	40000c00 	.word	0x40000c00
 8003850:	40010400 	.word	0x40010400
 8003854:	40014000 	.word	0x40014000
 8003858:	40014400 	.word	0x40014400
 800385c:	40014800 	.word	0x40014800
 8003860:	40001800 	.word	0x40001800
 8003864:	40001c00 	.word	0x40001c00
 8003868:	40002000 	.word	0x40002000

0800386c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800386c:	b480      	push	{r7}
 800386e:	b087      	sub	sp, #28
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6a1b      	ldr	r3, [r3, #32]
 800387c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	6a1b      	ldr	r3, [r3, #32]
 8003882:	f023 0201 	bic.w	r2, r3, #1
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003896:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	4313      	orrs	r3, r2
 80038a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	f023 030a 	bic.w	r3, r3, #10
 80038a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	697a      	ldr	r2, [r7, #20]
 80038bc:	621a      	str	r2, [r3, #32]
}
 80038be:	bf00      	nop
 80038c0:	371c      	adds	r7, #28
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr

080038c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a1b      	ldr	r3, [r3, #32]
 80038d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	f023 0210 	bic.w	r2, r3, #16
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	031b      	lsls	r3, r3, #12
 80038f8:	693a      	ldr	r2, [r7, #16]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003904:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	621a      	str	r2, [r3, #32]
}
 800391c:	bf00      	nop
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003926:	b480      	push	{r7}
 8003928:	b085      	sub	sp, #20
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
 800392e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800393c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800393e:	683a      	ldr	r2, [r7, #0]
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4313      	orrs	r3, r2
 8003944:	f043 0307 	orr.w	r3, r3, #7
 8003948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68fa      	ldr	r2, [r7, #12]
 800394e:	609a      	str	r2, [r3, #8]
}
 8003950:	bf00      	nop
 8003952:	3714      	adds	r7, #20
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr

0800395a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800395a:	b480      	push	{r7}
 800395c:	b087      	sub	sp, #28
 800395e:	af00      	add	r7, sp, #0
 8003960:	60f8      	str	r0, [r7, #12]
 8003962:	60b9      	str	r1, [r7, #8]
 8003964:	607a      	str	r2, [r7, #4]
 8003966:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003974:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	021a      	lsls	r2, r3, #8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	431a      	orrs	r2, r3
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	4313      	orrs	r3, r2
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	4313      	orrs	r3, r2
 8003986:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	609a      	str	r2, [r3, #8]
}
 800398e:	bf00      	nop
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d101      	bne.n	80039b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e05a      	b.n	8003a66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	68fa      	ldr	r2, [r7, #12]
 80039e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a20      	ldr	r2, [pc, #128]	@ (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d022      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039fc:	d01d      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a1c      	ldr	r2, [pc, #112]	@ (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d018      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a1a      	ldr	r2, [pc, #104]	@ (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d013      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a19      	ldr	r2, [pc, #100]	@ (8003a7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00e      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a17      	ldr	r2, [pc, #92]	@ (8003a80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d009      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a16      	ldr	r2, [pc, #88]	@ (8003a84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d004      	beq.n	8003a3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a14      	ldr	r2, [pc, #80]	@ (8003a88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d10c      	bne.n	8003a54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003a40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	68ba      	ldr	r2, [r7, #8]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68ba      	ldr	r2, [r7, #8]
 8003a52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2200      	movs	r2, #0
 8003a60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bc80      	pop	{r7}
 8003a6e:	4770      	bx	lr
 8003a70:	40010000 	.word	0x40010000
 8003a74:	40000400 	.word	0x40000400
 8003a78:	40000800 	.word	0x40000800
 8003a7c:	40000c00 	.word	0x40000c00
 8003a80:	40010400 	.word	0x40010400
 8003a84:	40014000 	.word	0x40014000
 8003a88:	40001800 	.word	0x40001800

08003a8c <siprintf>:
 8003a8c:	b40e      	push	{r1, r2, r3}
 8003a8e:	b500      	push	{lr}
 8003a90:	b09c      	sub	sp, #112	@ 0x70
 8003a92:	ab1d      	add	r3, sp, #116	@ 0x74
 8003a94:	9002      	str	r0, [sp, #8]
 8003a96:	9006      	str	r0, [sp, #24]
 8003a98:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003a9c:	4809      	ldr	r0, [pc, #36]	@ (8003ac4 <siprintf+0x38>)
 8003a9e:	9107      	str	r1, [sp, #28]
 8003aa0:	9104      	str	r1, [sp, #16]
 8003aa2:	4909      	ldr	r1, [pc, #36]	@ (8003ac8 <siprintf+0x3c>)
 8003aa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003aa8:	9105      	str	r1, [sp, #20]
 8003aaa:	6800      	ldr	r0, [r0, #0]
 8003aac:	9301      	str	r3, [sp, #4]
 8003aae:	a902      	add	r1, sp, #8
 8003ab0:	f000 f9b4 	bl	8003e1c <_svfiprintf_r>
 8003ab4:	9b02      	ldr	r3, [sp, #8]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
 8003aba:	b01c      	add	sp, #112	@ 0x70
 8003abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003ac0:	b003      	add	sp, #12
 8003ac2:	4770      	bx	lr
 8003ac4:	2000000c 	.word	0x2000000c
 8003ac8:	ffff0208 	.word	0xffff0208

08003acc <_vsiprintf_r>:
 8003acc:	b500      	push	{lr}
 8003ace:	b09b      	sub	sp, #108	@ 0x6c
 8003ad0:	9100      	str	r1, [sp, #0]
 8003ad2:	9104      	str	r1, [sp, #16]
 8003ad4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003ad8:	9105      	str	r1, [sp, #20]
 8003ada:	9102      	str	r1, [sp, #8]
 8003adc:	4905      	ldr	r1, [pc, #20]	@ (8003af4 <_vsiprintf_r+0x28>)
 8003ade:	9103      	str	r1, [sp, #12]
 8003ae0:	4669      	mov	r1, sp
 8003ae2:	f000 f99b 	bl	8003e1c <_svfiprintf_r>
 8003ae6:	9b00      	ldr	r3, [sp, #0]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	701a      	strb	r2, [r3, #0]
 8003aec:	b01b      	add	sp, #108	@ 0x6c
 8003aee:	f85d fb04 	ldr.w	pc, [sp], #4
 8003af2:	bf00      	nop
 8003af4:	ffff0208 	.word	0xffff0208

08003af8 <vsiprintf>:
 8003af8:	4613      	mov	r3, r2
 8003afa:	460a      	mov	r2, r1
 8003afc:	4601      	mov	r1, r0
 8003afe:	4802      	ldr	r0, [pc, #8]	@ (8003b08 <vsiprintf+0x10>)
 8003b00:	6800      	ldr	r0, [r0, #0]
 8003b02:	f7ff bfe3 	b.w	8003acc <_vsiprintf_r>
 8003b06:	bf00      	nop
 8003b08:	2000000c 	.word	0x2000000c

08003b0c <memset>:
 8003b0c:	4402      	add	r2, r0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d100      	bne.n	8003b16 <memset+0xa>
 8003b14:	4770      	bx	lr
 8003b16:	f803 1b01 	strb.w	r1, [r3], #1
 8003b1a:	e7f9      	b.n	8003b10 <memset+0x4>

08003b1c <__errno>:
 8003b1c:	4b01      	ldr	r3, [pc, #4]	@ (8003b24 <__errno+0x8>)
 8003b1e:	6818      	ldr	r0, [r3, #0]
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	2000000c 	.word	0x2000000c

08003b28 <__libc_init_array>:
 8003b28:	b570      	push	{r4, r5, r6, lr}
 8003b2a:	4d0d      	ldr	r5, [pc, #52]	@ (8003b60 <__libc_init_array+0x38>)
 8003b2c:	4c0d      	ldr	r4, [pc, #52]	@ (8003b64 <__libc_init_array+0x3c>)
 8003b2e:	1b64      	subs	r4, r4, r5
 8003b30:	10a4      	asrs	r4, r4, #2
 8003b32:	2600      	movs	r6, #0
 8003b34:	42a6      	cmp	r6, r4
 8003b36:	d109      	bne.n	8003b4c <__libc_init_array+0x24>
 8003b38:	4d0b      	ldr	r5, [pc, #44]	@ (8003b68 <__libc_init_array+0x40>)
 8003b3a:	4c0c      	ldr	r4, [pc, #48]	@ (8003b6c <__libc_init_array+0x44>)
 8003b3c:	f000 fc66 	bl	800440c <_init>
 8003b40:	1b64      	subs	r4, r4, r5
 8003b42:	10a4      	asrs	r4, r4, #2
 8003b44:	2600      	movs	r6, #0
 8003b46:	42a6      	cmp	r6, r4
 8003b48:	d105      	bne.n	8003b56 <__libc_init_array+0x2e>
 8003b4a:	bd70      	pop	{r4, r5, r6, pc}
 8003b4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b50:	4798      	blx	r3
 8003b52:	3601      	adds	r6, #1
 8003b54:	e7ee      	b.n	8003b34 <__libc_init_array+0xc>
 8003b56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5a:	4798      	blx	r3
 8003b5c:	3601      	adds	r6, #1
 8003b5e:	e7f2      	b.n	8003b46 <__libc_init_array+0x1e>
 8003b60:	080044a4 	.word	0x080044a4
 8003b64:	080044a4 	.word	0x080044a4
 8003b68:	080044a4 	.word	0x080044a4
 8003b6c:	080044a8 	.word	0x080044a8

08003b70 <__retarget_lock_acquire_recursive>:
 8003b70:	4770      	bx	lr

08003b72 <__retarget_lock_release_recursive>:
 8003b72:	4770      	bx	lr

08003b74 <_free_r>:
 8003b74:	b538      	push	{r3, r4, r5, lr}
 8003b76:	4605      	mov	r5, r0
 8003b78:	2900      	cmp	r1, #0
 8003b7a:	d041      	beq.n	8003c00 <_free_r+0x8c>
 8003b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b80:	1f0c      	subs	r4, r1, #4
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	bfb8      	it	lt
 8003b86:	18e4      	addlt	r4, r4, r3
 8003b88:	f000 f8e0 	bl	8003d4c <__malloc_lock>
 8003b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8003c04 <_free_r+0x90>)
 8003b8e:	6813      	ldr	r3, [r2, #0]
 8003b90:	b933      	cbnz	r3, 8003ba0 <_free_r+0x2c>
 8003b92:	6063      	str	r3, [r4, #4]
 8003b94:	6014      	str	r4, [r2, #0]
 8003b96:	4628      	mov	r0, r5
 8003b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b9c:	f000 b8dc 	b.w	8003d58 <__malloc_unlock>
 8003ba0:	42a3      	cmp	r3, r4
 8003ba2:	d908      	bls.n	8003bb6 <_free_r+0x42>
 8003ba4:	6820      	ldr	r0, [r4, #0]
 8003ba6:	1821      	adds	r1, r4, r0
 8003ba8:	428b      	cmp	r3, r1
 8003baa:	bf01      	itttt	eq
 8003bac:	6819      	ldreq	r1, [r3, #0]
 8003bae:	685b      	ldreq	r3, [r3, #4]
 8003bb0:	1809      	addeq	r1, r1, r0
 8003bb2:	6021      	streq	r1, [r4, #0]
 8003bb4:	e7ed      	b.n	8003b92 <_free_r+0x1e>
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	b10b      	cbz	r3, 8003bc0 <_free_r+0x4c>
 8003bbc:	42a3      	cmp	r3, r4
 8003bbe:	d9fa      	bls.n	8003bb6 <_free_r+0x42>
 8003bc0:	6811      	ldr	r1, [r2, #0]
 8003bc2:	1850      	adds	r0, r2, r1
 8003bc4:	42a0      	cmp	r0, r4
 8003bc6:	d10b      	bne.n	8003be0 <_free_r+0x6c>
 8003bc8:	6820      	ldr	r0, [r4, #0]
 8003bca:	4401      	add	r1, r0
 8003bcc:	1850      	adds	r0, r2, r1
 8003bce:	4283      	cmp	r3, r0
 8003bd0:	6011      	str	r1, [r2, #0]
 8003bd2:	d1e0      	bne.n	8003b96 <_free_r+0x22>
 8003bd4:	6818      	ldr	r0, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	6053      	str	r3, [r2, #4]
 8003bda:	4408      	add	r0, r1
 8003bdc:	6010      	str	r0, [r2, #0]
 8003bde:	e7da      	b.n	8003b96 <_free_r+0x22>
 8003be0:	d902      	bls.n	8003be8 <_free_r+0x74>
 8003be2:	230c      	movs	r3, #12
 8003be4:	602b      	str	r3, [r5, #0]
 8003be6:	e7d6      	b.n	8003b96 <_free_r+0x22>
 8003be8:	6820      	ldr	r0, [r4, #0]
 8003bea:	1821      	adds	r1, r4, r0
 8003bec:	428b      	cmp	r3, r1
 8003bee:	bf04      	itt	eq
 8003bf0:	6819      	ldreq	r1, [r3, #0]
 8003bf2:	685b      	ldreq	r3, [r3, #4]
 8003bf4:	6063      	str	r3, [r4, #4]
 8003bf6:	bf04      	itt	eq
 8003bf8:	1809      	addeq	r1, r1, r0
 8003bfa:	6021      	streq	r1, [r4, #0]
 8003bfc:	6054      	str	r4, [r2, #4]
 8003bfe:	e7ca      	b.n	8003b96 <_free_r+0x22>
 8003c00:	bd38      	pop	{r3, r4, r5, pc}
 8003c02:	bf00      	nop
 8003c04:	20000284 	.word	0x20000284

08003c08 <sbrk_aligned>:
 8003c08:	b570      	push	{r4, r5, r6, lr}
 8003c0a:	4e0f      	ldr	r6, [pc, #60]	@ (8003c48 <sbrk_aligned+0x40>)
 8003c0c:	460c      	mov	r4, r1
 8003c0e:	6831      	ldr	r1, [r6, #0]
 8003c10:	4605      	mov	r5, r0
 8003c12:	b911      	cbnz	r1, 8003c1a <sbrk_aligned+0x12>
 8003c14:	f000 fba6 	bl	8004364 <_sbrk_r>
 8003c18:	6030      	str	r0, [r6, #0]
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	4628      	mov	r0, r5
 8003c1e:	f000 fba1 	bl	8004364 <_sbrk_r>
 8003c22:	1c43      	adds	r3, r0, #1
 8003c24:	d103      	bne.n	8003c2e <sbrk_aligned+0x26>
 8003c26:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	bd70      	pop	{r4, r5, r6, pc}
 8003c2e:	1cc4      	adds	r4, r0, #3
 8003c30:	f024 0403 	bic.w	r4, r4, #3
 8003c34:	42a0      	cmp	r0, r4
 8003c36:	d0f8      	beq.n	8003c2a <sbrk_aligned+0x22>
 8003c38:	1a21      	subs	r1, r4, r0
 8003c3a:	4628      	mov	r0, r5
 8003c3c:	f000 fb92 	bl	8004364 <_sbrk_r>
 8003c40:	3001      	adds	r0, #1
 8003c42:	d1f2      	bne.n	8003c2a <sbrk_aligned+0x22>
 8003c44:	e7ef      	b.n	8003c26 <sbrk_aligned+0x1e>
 8003c46:	bf00      	nop
 8003c48:	20000280 	.word	0x20000280

08003c4c <_malloc_r>:
 8003c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c50:	1ccd      	adds	r5, r1, #3
 8003c52:	f025 0503 	bic.w	r5, r5, #3
 8003c56:	3508      	adds	r5, #8
 8003c58:	2d0c      	cmp	r5, #12
 8003c5a:	bf38      	it	cc
 8003c5c:	250c      	movcc	r5, #12
 8003c5e:	2d00      	cmp	r5, #0
 8003c60:	4606      	mov	r6, r0
 8003c62:	db01      	blt.n	8003c68 <_malloc_r+0x1c>
 8003c64:	42a9      	cmp	r1, r5
 8003c66:	d904      	bls.n	8003c72 <_malloc_r+0x26>
 8003c68:	230c      	movs	r3, #12
 8003c6a:	6033      	str	r3, [r6, #0]
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d48 <_malloc_r+0xfc>
 8003c76:	f000 f869 	bl	8003d4c <__malloc_lock>
 8003c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8003c7e:	461c      	mov	r4, r3
 8003c80:	bb44      	cbnz	r4, 8003cd4 <_malloc_r+0x88>
 8003c82:	4629      	mov	r1, r5
 8003c84:	4630      	mov	r0, r6
 8003c86:	f7ff ffbf 	bl	8003c08 <sbrk_aligned>
 8003c8a:	1c43      	adds	r3, r0, #1
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	d158      	bne.n	8003d42 <_malloc_r+0xf6>
 8003c90:	f8d8 4000 	ldr.w	r4, [r8]
 8003c94:	4627      	mov	r7, r4
 8003c96:	2f00      	cmp	r7, #0
 8003c98:	d143      	bne.n	8003d22 <_malloc_r+0xd6>
 8003c9a:	2c00      	cmp	r4, #0
 8003c9c:	d04b      	beq.n	8003d36 <_malloc_r+0xea>
 8003c9e:	6823      	ldr	r3, [r4, #0]
 8003ca0:	4639      	mov	r1, r7
 8003ca2:	4630      	mov	r0, r6
 8003ca4:	eb04 0903 	add.w	r9, r4, r3
 8003ca8:	f000 fb5c 	bl	8004364 <_sbrk_r>
 8003cac:	4581      	cmp	r9, r0
 8003cae:	d142      	bne.n	8003d36 <_malloc_r+0xea>
 8003cb0:	6821      	ldr	r1, [r4, #0]
 8003cb2:	1a6d      	subs	r5, r5, r1
 8003cb4:	4629      	mov	r1, r5
 8003cb6:	4630      	mov	r0, r6
 8003cb8:	f7ff ffa6 	bl	8003c08 <sbrk_aligned>
 8003cbc:	3001      	adds	r0, #1
 8003cbe:	d03a      	beq.n	8003d36 <_malloc_r+0xea>
 8003cc0:	6823      	ldr	r3, [r4, #0]
 8003cc2:	442b      	add	r3, r5
 8003cc4:	6023      	str	r3, [r4, #0]
 8003cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	bb62      	cbnz	r2, 8003d28 <_malloc_r+0xdc>
 8003cce:	f8c8 7000 	str.w	r7, [r8]
 8003cd2:	e00f      	b.n	8003cf4 <_malloc_r+0xa8>
 8003cd4:	6822      	ldr	r2, [r4, #0]
 8003cd6:	1b52      	subs	r2, r2, r5
 8003cd8:	d420      	bmi.n	8003d1c <_malloc_r+0xd0>
 8003cda:	2a0b      	cmp	r2, #11
 8003cdc:	d917      	bls.n	8003d0e <_malloc_r+0xc2>
 8003cde:	1961      	adds	r1, r4, r5
 8003ce0:	42a3      	cmp	r3, r4
 8003ce2:	6025      	str	r5, [r4, #0]
 8003ce4:	bf18      	it	ne
 8003ce6:	6059      	strne	r1, [r3, #4]
 8003ce8:	6863      	ldr	r3, [r4, #4]
 8003cea:	bf08      	it	eq
 8003cec:	f8c8 1000 	streq.w	r1, [r8]
 8003cf0:	5162      	str	r2, [r4, r5]
 8003cf2:	604b      	str	r3, [r1, #4]
 8003cf4:	4630      	mov	r0, r6
 8003cf6:	f000 f82f 	bl	8003d58 <__malloc_unlock>
 8003cfa:	f104 000b 	add.w	r0, r4, #11
 8003cfe:	1d23      	adds	r3, r4, #4
 8003d00:	f020 0007 	bic.w	r0, r0, #7
 8003d04:	1ac2      	subs	r2, r0, r3
 8003d06:	bf1c      	itt	ne
 8003d08:	1a1b      	subne	r3, r3, r0
 8003d0a:	50a3      	strne	r3, [r4, r2]
 8003d0c:	e7af      	b.n	8003c6e <_malloc_r+0x22>
 8003d0e:	6862      	ldr	r2, [r4, #4]
 8003d10:	42a3      	cmp	r3, r4
 8003d12:	bf0c      	ite	eq
 8003d14:	f8c8 2000 	streq.w	r2, [r8]
 8003d18:	605a      	strne	r2, [r3, #4]
 8003d1a:	e7eb      	b.n	8003cf4 <_malloc_r+0xa8>
 8003d1c:	4623      	mov	r3, r4
 8003d1e:	6864      	ldr	r4, [r4, #4]
 8003d20:	e7ae      	b.n	8003c80 <_malloc_r+0x34>
 8003d22:	463c      	mov	r4, r7
 8003d24:	687f      	ldr	r7, [r7, #4]
 8003d26:	e7b6      	b.n	8003c96 <_malloc_r+0x4a>
 8003d28:	461a      	mov	r2, r3
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	d1fb      	bne.n	8003d28 <_malloc_r+0xdc>
 8003d30:	2300      	movs	r3, #0
 8003d32:	6053      	str	r3, [r2, #4]
 8003d34:	e7de      	b.n	8003cf4 <_malloc_r+0xa8>
 8003d36:	230c      	movs	r3, #12
 8003d38:	6033      	str	r3, [r6, #0]
 8003d3a:	4630      	mov	r0, r6
 8003d3c:	f000 f80c 	bl	8003d58 <__malloc_unlock>
 8003d40:	e794      	b.n	8003c6c <_malloc_r+0x20>
 8003d42:	6005      	str	r5, [r0, #0]
 8003d44:	e7d6      	b.n	8003cf4 <_malloc_r+0xa8>
 8003d46:	bf00      	nop
 8003d48:	20000284 	.word	0x20000284

08003d4c <__malloc_lock>:
 8003d4c:	4801      	ldr	r0, [pc, #4]	@ (8003d54 <__malloc_lock+0x8>)
 8003d4e:	f7ff bf0f 	b.w	8003b70 <__retarget_lock_acquire_recursive>
 8003d52:	bf00      	nop
 8003d54:	2000027c 	.word	0x2000027c

08003d58 <__malloc_unlock>:
 8003d58:	4801      	ldr	r0, [pc, #4]	@ (8003d60 <__malloc_unlock+0x8>)
 8003d5a:	f7ff bf0a 	b.w	8003b72 <__retarget_lock_release_recursive>
 8003d5e:	bf00      	nop
 8003d60:	2000027c 	.word	0x2000027c

08003d64 <__ssputs_r>:
 8003d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d68:	688e      	ldr	r6, [r1, #8]
 8003d6a:	461f      	mov	r7, r3
 8003d6c:	42be      	cmp	r6, r7
 8003d6e:	680b      	ldr	r3, [r1, #0]
 8003d70:	4682      	mov	sl, r0
 8003d72:	460c      	mov	r4, r1
 8003d74:	4690      	mov	r8, r2
 8003d76:	d82d      	bhi.n	8003dd4 <__ssputs_r+0x70>
 8003d78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003d7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003d80:	d026      	beq.n	8003dd0 <__ssputs_r+0x6c>
 8003d82:	6965      	ldr	r5, [r4, #20]
 8003d84:	6909      	ldr	r1, [r1, #16]
 8003d86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003d8a:	eba3 0901 	sub.w	r9, r3, r1
 8003d8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003d92:	1c7b      	adds	r3, r7, #1
 8003d94:	444b      	add	r3, r9
 8003d96:	106d      	asrs	r5, r5, #1
 8003d98:	429d      	cmp	r5, r3
 8003d9a:	bf38      	it	cc
 8003d9c:	461d      	movcc	r5, r3
 8003d9e:	0553      	lsls	r3, r2, #21
 8003da0:	d527      	bpl.n	8003df2 <__ssputs_r+0x8e>
 8003da2:	4629      	mov	r1, r5
 8003da4:	f7ff ff52 	bl	8003c4c <_malloc_r>
 8003da8:	4606      	mov	r6, r0
 8003daa:	b360      	cbz	r0, 8003e06 <__ssputs_r+0xa2>
 8003dac:	6921      	ldr	r1, [r4, #16]
 8003dae:	464a      	mov	r2, r9
 8003db0:	f000 fae8 	bl	8004384 <memcpy>
 8003db4:	89a3      	ldrh	r3, [r4, #12]
 8003db6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003dba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003dbe:	81a3      	strh	r3, [r4, #12]
 8003dc0:	6126      	str	r6, [r4, #16]
 8003dc2:	6165      	str	r5, [r4, #20]
 8003dc4:	444e      	add	r6, r9
 8003dc6:	eba5 0509 	sub.w	r5, r5, r9
 8003dca:	6026      	str	r6, [r4, #0]
 8003dcc:	60a5      	str	r5, [r4, #8]
 8003dce:	463e      	mov	r6, r7
 8003dd0:	42be      	cmp	r6, r7
 8003dd2:	d900      	bls.n	8003dd6 <__ssputs_r+0x72>
 8003dd4:	463e      	mov	r6, r7
 8003dd6:	6820      	ldr	r0, [r4, #0]
 8003dd8:	4632      	mov	r2, r6
 8003dda:	4641      	mov	r1, r8
 8003ddc:	f000 faa8 	bl	8004330 <memmove>
 8003de0:	68a3      	ldr	r3, [r4, #8]
 8003de2:	1b9b      	subs	r3, r3, r6
 8003de4:	60a3      	str	r3, [r4, #8]
 8003de6:	6823      	ldr	r3, [r4, #0]
 8003de8:	4433      	add	r3, r6
 8003dea:	6023      	str	r3, [r4, #0]
 8003dec:	2000      	movs	r0, #0
 8003dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003df2:	462a      	mov	r2, r5
 8003df4:	f000 fad4 	bl	80043a0 <_realloc_r>
 8003df8:	4606      	mov	r6, r0
 8003dfa:	2800      	cmp	r0, #0
 8003dfc:	d1e0      	bne.n	8003dc0 <__ssputs_r+0x5c>
 8003dfe:	6921      	ldr	r1, [r4, #16]
 8003e00:	4650      	mov	r0, sl
 8003e02:	f7ff feb7 	bl	8003b74 <_free_r>
 8003e06:	230c      	movs	r3, #12
 8003e08:	f8ca 3000 	str.w	r3, [sl]
 8003e0c:	89a3      	ldrh	r3, [r4, #12]
 8003e0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e12:	81a3      	strh	r3, [r4, #12]
 8003e14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e18:	e7e9      	b.n	8003dee <__ssputs_r+0x8a>
	...

08003e1c <_svfiprintf_r>:
 8003e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e20:	4698      	mov	r8, r3
 8003e22:	898b      	ldrh	r3, [r1, #12]
 8003e24:	061b      	lsls	r3, r3, #24
 8003e26:	b09d      	sub	sp, #116	@ 0x74
 8003e28:	4607      	mov	r7, r0
 8003e2a:	460d      	mov	r5, r1
 8003e2c:	4614      	mov	r4, r2
 8003e2e:	d510      	bpl.n	8003e52 <_svfiprintf_r+0x36>
 8003e30:	690b      	ldr	r3, [r1, #16]
 8003e32:	b973      	cbnz	r3, 8003e52 <_svfiprintf_r+0x36>
 8003e34:	2140      	movs	r1, #64	@ 0x40
 8003e36:	f7ff ff09 	bl	8003c4c <_malloc_r>
 8003e3a:	6028      	str	r0, [r5, #0]
 8003e3c:	6128      	str	r0, [r5, #16]
 8003e3e:	b930      	cbnz	r0, 8003e4e <_svfiprintf_r+0x32>
 8003e40:	230c      	movs	r3, #12
 8003e42:	603b      	str	r3, [r7, #0]
 8003e44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003e48:	b01d      	add	sp, #116	@ 0x74
 8003e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e4e:	2340      	movs	r3, #64	@ 0x40
 8003e50:	616b      	str	r3, [r5, #20]
 8003e52:	2300      	movs	r3, #0
 8003e54:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e56:	2320      	movs	r3, #32
 8003e58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003e5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e60:	2330      	movs	r3, #48	@ 0x30
 8003e62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004000 <_svfiprintf_r+0x1e4>
 8003e66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003e6a:	f04f 0901 	mov.w	r9, #1
 8003e6e:	4623      	mov	r3, r4
 8003e70:	469a      	mov	sl, r3
 8003e72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e76:	b10a      	cbz	r2, 8003e7c <_svfiprintf_r+0x60>
 8003e78:	2a25      	cmp	r2, #37	@ 0x25
 8003e7a:	d1f9      	bne.n	8003e70 <_svfiprintf_r+0x54>
 8003e7c:	ebba 0b04 	subs.w	fp, sl, r4
 8003e80:	d00b      	beq.n	8003e9a <_svfiprintf_r+0x7e>
 8003e82:	465b      	mov	r3, fp
 8003e84:	4622      	mov	r2, r4
 8003e86:	4629      	mov	r1, r5
 8003e88:	4638      	mov	r0, r7
 8003e8a:	f7ff ff6b 	bl	8003d64 <__ssputs_r>
 8003e8e:	3001      	adds	r0, #1
 8003e90:	f000 80a7 	beq.w	8003fe2 <_svfiprintf_r+0x1c6>
 8003e94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e96:	445a      	add	r2, fp
 8003e98:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e9a:	f89a 3000 	ldrb.w	r3, [sl]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	f000 809f 	beq.w	8003fe2 <_svfiprintf_r+0x1c6>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003eaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eae:	f10a 0a01 	add.w	sl, sl, #1
 8003eb2:	9304      	str	r3, [sp, #16]
 8003eb4:	9307      	str	r3, [sp, #28]
 8003eb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003eba:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ebc:	4654      	mov	r4, sl
 8003ebe:	2205      	movs	r2, #5
 8003ec0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ec4:	484e      	ldr	r0, [pc, #312]	@ (8004000 <_svfiprintf_r+0x1e4>)
 8003ec6:	f7fc f98b 	bl	80001e0 <memchr>
 8003eca:	9a04      	ldr	r2, [sp, #16]
 8003ecc:	b9d8      	cbnz	r0, 8003f06 <_svfiprintf_r+0xea>
 8003ece:	06d0      	lsls	r0, r2, #27
 8003ed0:	bf44      	itt	mi
 8003ed2:	2320      	movmi	r3, #32
 8003ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ed8:	0711      	lsls	r1, r2, #28
 8003eda:	bf44      	itt	mi
 8003edc:	232b      	movmi	r3, #43	@ 0x2b
 8003ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003ee2:	f89a 3000 	ldrb.w	r3, [sl]
 8003ee6:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ee8:	d015      	beq.n	8003f16 <_svfiprintf_r+0xfa>
 8003eea:	9a07      	ldr	r2, [sp, #28]
 8003eec:	4654      	mov	r4, sl
 8003eee:	2000      	movs	r0, #0
 8003ef0:	f04f 0c0a 	mov.w	ip, #10
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003efa:	3b30      	subs	r3, #48	@ 0x30
 8003efc:	2b09      	cmp	r3, #9
 8003efe:	d94b      	bls.n	8003f98 <_svfiprintf_r+0x17c>
 8003f00:	b1b0      	cbz	r0, 8003f30 <_svfiprintf_r+0x114>
 8003f02:	9207      	str	r2, [sp, #28]
 8003f04:	e014      	b.n	8003f30 <_svfiprintf_r+0x114>
 8003f06:	eba0 0308 	sub.w	r3, r0, r8
 8003f0a:	fa09 f303 	lsl.w	r3, r9, r3
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	9304      	str	r3, [sp, #16]
 8003f12:	46a2      	mov	sl, r4
 8003f14:	e7d2      	b.n	8003ebc <_svfiprintf_r+0xa0>
 8003f16:	9b03      	ldr	r3, [sp, #12]
 8003f18:	1d19      	adds	r1, r3, #4
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	9103      	str	r1, [sp, #12]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	bfbb      	ittet	lt
 8003f22:	425b      	neglt	r3, r3
 8003f24:	f042 0202 	orrlt.w	r2, r2, #2
 8003f28:	9307      	strge	r3, [sp, #28]
 8003f2a:	9307      	strlt	r3, [sp, #28]
 8003f2c:	bfb8      	it	lt
 8003f2e:	9204      	strlt	r2, [sp, #16]
 8003f30:	7823      	ldrb	r3, [r4, #0]
 8003f32:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f34:	d10a      	bne.n	8003f4c <_svfiprintf_r+0x130>
 8003f36:	7863      	ldrb	r3, [r4, #1]
 8003f38:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f3a:	d132      	bne.n	8003fa2 <_svfiprintf_r+0x186>
 8003f3c:	9b03      	ldr	r3, [sp, #12]
 8003f3e:	1d1a      	adds	r2, r3, #4
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	9203      	str	r2, [sp, #12]
 8003f44:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003f48:	3402      	adds	r4, #2
 8003f4a:	9305      	str	r3, [sp, #20]
 8003f4c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004004 <_svfiprintf_r+0x1e8>
 8003f50:	7821      	ldrb	r1, [r4, #0]
 8003f52:	2203      	movs	r2, #3
 8003f54:	4650      	mov	r0, sl
 8003f56:	f7fc f943 	bl	80001e0 <memchr>
 8003f5a:	b138      	cbz	r0, 8003f6c <_svfiprintf_r+0x150>
 8003f5c:	9b04      	ldr	r3, [sp, #16]
 8003f5e:	eba0 000a 	sub.w	r0, r0, sl
 8003f62:	2240      	movs	r2, #64	@ 0x40
 8003f64:	4082      	lsls	r2, r0
 8003f66:	4313      	orrs	r3, r2
 8003f68:	3401      	adds	r4, #1
 8003f6a:	9304      	str	r3, [sp, #16]
 8003f6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f70:	4825      	ldr	r0, [pc, #148]	@ (8004008 <_svfiprintf_r+0x1ec>)
 8003f72:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f76:	2206      	movs	r2, #6
 8003f78:	f7fc f932 	bl	80001e0 <memchr>
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	d036      	beq.n	8003fee <_svfiprintf_r+0x1d2>
 8003f80:	4b22      	ldr	r3, [pc, #136]	@ (800400c <_svfiprintf_r+0x1f0>)
 8003f82:	bb1b      	cbnz	r3, 8003fcc <_svfiprintf_r+0x1b0>
 8003f84:	9b03      	ldr	r3, [sp, #12]
 8003f86:	3307      	adds	r3, #7
 8003f88:	f023 0307 	bic.w	r3, r3, #7
 8003f8c:	3308      	adds	r3, #8
 8003f8e:	9303      	str	r3, [sp, #12]
 8003f90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f92:	4433      	add	r3, r6
 8003f94:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f96:	e76a      	b.n	8003e6e <_svfiprintf_r+0x52>
 8003f98:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f9c:	460c      	mov	r4, r1
 8003f9e:	2001      	movs	r0, #1
 8003fa0:	e7a8      	b.n	8003ef4 <_svfiprintf_r+0xd8>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	3401      	adds	r4, #1
 8003fa6:	9305      	str	r3, [sp, #20]
 8003fa8:	4619      	mov	r1, r3
 8003faa:	f04f 0c0a 	mov.w	ip, #10
 8003fae:	4620      	mov	r0, r4
 8003fb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fb4:	3a30      	subs	r2, #48	@ 0x30
 8003fb6:	2a09      	cmp	r2, #9
 8003fb8:	d903      	bls.n	8003fc2 <_svfiprintf_r+0x1a6>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d0c6      	beq.n	8003f4c <_svfiprintf_r+0x130>
 8003fbe:	9105      	str	r1, [sp, #20]
 8003fc0:	e7c4      	b.n	8003f4c <_svfiprintf_r+0x130>
 8003fc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e7f0      	b.n	8003fae <_svfiprintf_r+0x192>
 8003fcc:	ab03      	add	r3, sp, #12
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	462a      	mov	r2, r5
 8003fd2:	4b0f      	ldr	r3, [pc, #60]	@ (8004010 <_svfiprintf_r+0x1f4>)
 8003fd4:	a904      	add	r1, sp, #16
 8003fd6:	4638      	mov	r0, r7
 8003fd8:	f3af 8000 	nop.w
 8003fdc:	1c42      	adds	r2, r0, #1
 8003fde:	4606      	mov	r6, r0
 8003fe0:	d1d6      	bne.n	8003f90 <_svfiprintf_r+0x174>
 8003fe2:	89ab      	ldrh	r3, [r5, #12]
 8003fe4:	065b      	lsls	r3, r3, #25
 8003fe6:	f53f af2d 	bmi.w	8003e44 <_svfiprintf_r+0x28>
 8003fea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003fec:	e72c      	b.n	8003e48 <_svfiprintf_r+0x2c>
 8003fee:	ab03      	add	r3, sp, #12
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	462a      	mov	r2, r5
 8003ff4:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <_svfiprintf_r+0x1f4>)
 8003ff6:	a904      	add	r1, sp, #16
 8003ff8:	4638      	mov	r0, r7
 8003ffa:	f000 f879 	bl	80040f0 <_printf_i>
 8003ffe:	e7ed      	b.n	8003fdc <_svfiprintf_r+0x1c0>
 8004000:	08004468 	.word	0x08004468
 8004004:	0800446e 	.word	0x0800446e
 8004008:	08004472 	.word	0x08004472
 800400c:	00000000 	.word	0x00000000
 8004010:	08003d65 	.word	0x08003d65

08004014 <_printf_common>:
 8004014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004018:	4616      	mov	r6, r2
 800401a:	4698      	mov	r8, r3
 800401c:	688a      	ldr	r2, [r1, #8]
 800401e:	690b      	ldr	r3, [r1, #16]
 8004020:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004024:	4293      	cmp	r3, r2
 8004026:	bfb8      	it	lt
 8004028:	4613      	movlt	r3, r2
 800402a:	6033      	str	r3, [r6, #0]
 800402c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004030:	4607      	mov	r7, r0
 8004032:	460c      	mov	r4, r1
 8004034:	b10a      	cbz	r2, 800403a <_printf_common+0x26>
 8004036:	3301      	adds	r3, #1
 8004038:	6033      	str	r3, [r6, #0]
 800403a:	6823      	ldr	r3, [r4, #0]
 800403c:	0699      	lsls	r1, r3, #26
 800403e:	bf42      	ittt	mi
 8004040:	6833      	ldrmi	r3, [r6, #0]
 8004042:	3302      	addmi	r3, #2
 8004044:	6033      	strmi	r3, [r6, #0]
 8004046:	6825      	ldr	r5, [r4, #0]
 8004048:	f015 0506 	ands.w	r5, r5, #6
 800404c:	d106      	bne.n	800405c <_printf_common+0x48>
 800404e:	f104 0a19 	add.w	sl, r4, #25
 8004052:	68e3      	ldr	r3, [r4, #12]
 8004054:	6832      	ldr	r2, [r6, #0]
 8004056:	1a9b      	subs	r3, r3, r2
 8004058:	42ab      	cmp	r3, r5
 800405a:	dc26      	bgt.n	80040aa <_printf_common+0x96>
 800405c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004060:	6822      	ldr	r2, [r4, #0]
 8004062:	3b00      	subs	r3, #0
 8004064:	bf18      	it	ne
 8004066:	2301      	movne	r3, #1
 8004068:	0692      	lsls	r2, r2, #26
 800406a:	d42b      	bmi.n	80040c4 <_printf_common+0xb0>
 800406c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004070:	4641      	mov	r1, r8
 8004072:	4638      	mov	r0, r7
 8004074:	47c8      	blx	r9
 8004076:	3001      	adds	r0, #1
 8004078:	d01e      	beq.n	80040b8 <_printf_common+0xa4>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	6922      	ldr	r2, [r4, #16]
 800407e:	f003 0306 	and.w	r3, r3, #6
 8004082:	2b04      	cmp	r3, #4
 8004084:	bf02      	ittt	eq
 8004086:	68e5      	ldreq	r5, [r4, #12]
 8004088:	6833      	ldreq	r3, [r6, #0]
 800408a:	1aed      	subeq	r5, r5, r3
 800408c:	68a3      	ldr	r3, [r4, #8]
 800408e:	bf0c      	ite	eq
 8004090:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004094:	2500      	movne	r5, #0
 8004096:	4293      	cmp	r3, r2
 8004098:	bfc4      	itt	gt
 800409a:	1a9b      	subgt	r3, r3, r2
 800409c:	18ed      	addgt	r5, r5, r3
 800409e:	2600      	movs	r6, #0
 80040a0:	341a      	adds	r4, #26
 80040a2:	42b5      	cmp	r5, r6
 80040a4:	d11a      	bne.n	80040dc <_printf_common+0xc8>
 80040a6:	2000      	movs	r0, #0
 80040a8:	e008      	b.n	80040bc <_printf_common+0xa8>
 80040aa:	2301      	movs	r3, #1
 80040ac:	4652      	mov	r2, sl
 80040ae:	4641      	mov	r1, r8
 80040b0:	4638      	mov	r0, r7
 80040b2:	47c8      	blx	r9
 80040b4:	3001      	adds	r0, #1
 80040b6:	d103      	bne.n	80040c0 <_printf_common+0xac>
 80040b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040c0:	3501      	adds	r5, #1
 80040c2:	e7c6      	b.n	8004052 <_printf_common+0x3e>
 80040c4:	18e1      	adds	r1, r4, r3
 80040c6:	1c5a      	adds	r2, r3, #1
 80040c8:	2030      	movs	r0, #48	@ 0x30
 80040ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80040ce:	4422      	add	r2, r4
 80040d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80040d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80040d8:	3302      	adds	r3, #2
 80040da:	e7c7      	b.n	800406c <_printf_common+0x58>
 80040dc:	2301      	movs	r3, #1
 80040de:	4622      	mov	r2, r4
 80040e0:	4641      	mov	r1, r8
 80040e2:	4638      	mov	r0, r7
 80040e4:	47c8      	blx	r9
 80040e6:	3001      	adds	r0, #1
 80040e8:	d0e6      	beq.n	80040b8 <_printf_common+0xa4>
 80040ea:	3601      	adds	r6, #1
 80040ec:	e7d9      	b.n	80040a2 <_printf_common+0x8e>
	...

080040f0 <_printf_i>:
 80040f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80040f4:	7e0f      	ldrb	r7, [r1, #24]
 80040f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80040f8:	2f78      	cmp	r7, #120	@ 0x78
 80040fa:	4691      	mov	r9, r2
 80040fc:	4680      	mov	r8, r0
 80040fe:	460c      	mov	r4, r1
 8004100:	469a      	mov	sl, r3
 8004102:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004106:	d807      	bhi.n	8004118 <_printf_i+0x28>
 8004108:	2f62      	cmp	r7, #98	@ 0x62
 800410a:	d80a      	bhi.n	8004122 <_printf_i+0x32>
 800410c:	2f00      	cmp	r7, #0
 800410e:	f000 80d2 	beq.w	80042b6 <_printf_i+0x1c6>
 8004112:	2f58      	cmp	r7, #88	@ 0x58
 8004114:	f000 80b9 	beq.w	800428a <_printf_i+0x19a>
 8004118:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800411c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004120:	e03a      	b.n	8004198 <_printf_i+0xa8>
 8004122:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004126:	2b15      	cmp	r3, #21
 8004128:	d8f6      	bhi.n	8004118 <_printf_i+0x28>
 800412a:	a101      	add	r1, pc, #4	@ (adr r1, 8004130 <_printf_i+0x40>)
 800412c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004130:	08004189 	.word	0x08004189
 8004134:	0800419d 	.word	0x0800419d
 8004138:	08004119 	.word	0x08004119
 800413c:	08004119 	.word	0x08004119
 8004140:	08004119 	.word	0x08004119
 8004144:	08004119 	.word	0x08004119
 8004148:	0800419d 	.word	0x0800419d
 800414c:	08004119 	.word	0x08004119
 8004150:	08004119 	.word	0x08004119
 8004154:	08004119 	.word	0x08004119
 8004158:	08004119 	.word	0x08004119
 800415c:	0800429d 	.word	0x0800429d
 8004160:	080041c7 	.word	0x080041c7
 8004164:	08004257 	.word	0x08004257
 8004168:	08004119 	.word	0x08004119
 800416c:	08004119 	.word	0x08004119
 8004170:	080042bf 	.word	0x080042bf
 8004174:	08004119 	.word	0x08004119
 8004178:	080041c7 	.word	0x080041c7
 800417c:	08004119 	.word	0x08004119
 8004180:	08004119 	.word	0x08004119
 8004184:	0800425f 	.word	0x0800425f
 8004188:	6833      	ldr	r3, [r6, #0]
 800418a:	1d1a      	adds	r2, r3, #4
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6032      	str	r2, [r6, #0]
 8004190:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004194:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004198:	2301      	movs	r3, #1
 800419a:	e09d      	b.n	80042d8 <_printf_i+0x1e8>
 800419c:	6833      	ldr	r3, [r6, #0]
 800419e:	6820      	ldr	r0, [r4, #0]
 80041a0:	1d19      	adds	r1, r3, #4
 80041a2:	6031      	str	r1, [r6, #0]
 80041a4:	0606      	lsls	r6, r0, #24
 80041a6:	d501      	bpl.n	80041ac <_printf_i+0xbc>
 80041a8:	681d      	ldr	r5, [r3, #0]
 80041aa:	e003      	b.n	80041b4 <_printf_i+0xc4>
 80041ac:	0645      	lsls	r5, r0, #25
 80041ae:	d5fb      	bpl.n	80041a8 <_printf_i+0xb8>
 80041b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80041b4:	2d00      	cmp	r5, #0
 80041b6:	da03      	bge.n	80041c0 <_printf_i+0xd0>
 80041b8:	232d      	movs	r3, #45	@ 0x2d
 80041ba:	426d      	negs	r5, r5
 80041bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80041c0:	4859      	ldr	r0, [pc, #356]	@ (8004328 <_printf_i+0x238>)
 80041c2:	230a      	movs	r3, #10
 80041c4:	e011      	b.n	80041ea <_printf_i+0xfa>
 80041c6:	6821      	ldr	r1, [r4, #0]
 80041c8:	6833      	ldr	r3, [r6, #0]
 80041ca:	0608      	lsls	r0, r1, #24
 80041cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80041d0:	d402      	bmi.n	80041d8 <_printf_i+0xe8>
 80041d2:	0649      	lsls	r1, r1, #25
 80041d4:	bf48      	it	mi
 80041d6:	b2ad      	uxthmi	r5, r5
 80041d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80041da:	4853      	ldr	r0, [pc, #332]	@ (8004328 <_printf_i+0x238>)
 80041dc:	6033      	str	r3, [r6, #0]
 80041de:	bf14      	ite	ne
 80041e0:	230a      	movne	r3, #10
 80041e2:	2308      	moveq	r3, #8
 80041e4:	2100      	movs	r1, #0
 80041e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80041ea:	6866      	ldr	r6, [r4, #4]
 80041ec:	60a6      	str	r6, [r4, #8]
 80041ee:	2e00      	cmp	r6, #0
 80041f0:	bfa2      	ittt	ge
 80041f2:	6821      	ldrge	r1, [r4, #0]
 80041f4:	f021 0104 	bicge.w	r1, r1, #4
 80041f8:	6021      	strge	r1, [r4, #0]
 80041fa:	b90d      	cbnz	r5, 8004200 <_printf_i+0x110>
 80041fc:	2e00      	cmp	r6, #0
 80041fe:	d04b      	beq.n	8004298 <_printf_i+0x1a8>
 8004200:	4616      	mov	r6, r2
 8004202:	fbb5 f1f3 	udiv	r1, r5, r3
 8004206:	fb03 5711 	mls	r7, r3, r1, r5
 800420a:	5dc7      	ldrb	r7, [r0, r7]
 800420c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004210:	462f      	mov	r7, r5
 8004212:	42bb      	cmp	r3, r7
 8004214:	460d      	mov	r5, r1
 8004216:	d9f4      	bls.n	8004202 <_printf_i+0x112>
 8004218:	2b08      	cmp	r3, #8
 800421a:	d10b      	bne.n	8004234 <_printf_i+0x144>
 800421c:	6823      	ldr	r3, [r4, #0]
 800421e:	07df      	lsls	r7, r3, #31
 8004220:	d508      	bpl.n	8004234 <_printf_i+0x144>
 8004222:	6923      	ldr	r3, [r4, #16]
 8004224:	6861      	ldr	r1, [r4, #4]
 8004226:	4299      	cmp	r1, r3
 8004228:	bfde      	ittt	le
 800422a:	2330      	movle	r3, #48	@ 0x30
 800422c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004230:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004234:	1b92      	subs	r2, r2, r6
 8004236:	6122      	str	r2, [r4, #16]
 8004238:	f8cd a000 	str.w	sl, [sp]
 800423c:	464b      	mov	r3, r9
 800423e:	aa03      	add	r2, sp, #12
 8004240:	4621      	mov	r1, r4
 8004242:	4640      	mov	r0, r8
 8004244:	f7ff fee6 	bl	8004014 <_printf_common>
 8004248:	3001      	adds	r0, #1
 800424a:	d14a      	bne.n	80042e2 <_printf_i+0x1f2>
 800424c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004250:	b004      	add	sp, #16
 8004252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004256:	6823      	ldr	r3, [r4, #0]
 8004258:	f043 0320 	orr.w	r3, r3, #32
 800425c:	6023      	str	r3, [r4, #0]
 800425e:	4833      	ldr	r0, [pc, #204]	@ (800432c <_printf_i+0x23c>)
 8004260:	2778      	movs	r7, #120	@ 0x78
 8004262:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004266:	6823      	ldr	r3, [r4, #0]
 8004268:	6831      	ldr	r1, [r6, #0]
 800426a:	061f      	lsls	r7, r3, #24
 800426c:	f851 5b04 	ldr.w	r5, [r1], #4
 8004270:	d402      	bmi.n	8004278 <_printf_i+0x188>
 8004272:	065f      	lsls	r7, r3, #25
 8004274:	bf48      	it	mi
 8004276:	b2ad      	uxthmi	r5, r5
 8004278:	6031      	str	r1, [r6, #0]
 800427a:	07d9      	lsls	r1, r3, #31
 800427c:	bf44      	itt	mi
 800427e:	f043 0320 	orrmi.w	r3, r3, #32
 8004282:	6023      	strmi	r3, [r4, #0]
 8004284:	b11d      	cbz	r5, 800428e <_printf_i+0x19e>
 8004286:	2310      	movs	r3, #16
 8004288:	e7ac      	b.n	80041e4 <_printf_i+0xf4>
 800428a:	4827      	ldr	r0, [pc, #156]	@ (8004328 <_printf_i+0x238>)
 800428c:	e7e9      	b.n	8004262 <_printf_i+0x172>
 800428e:	6823      	ldr	r3, [r4, #0]
 8004290:	f023 0320 	bic.w	r3, r3, #32
 8004294:	6023      	str	r3, [r4, #0]
 8004296:	e7f6      	b.n	8004286 <_printf_i+0x196>
 8004298:	4616      	mov	r6, r2
 800429a:	e7bd      	b.n	8004218 <_printf_i+0x128>
 800429c:	6833      	ldr	r3, [r6, #0]
 800429e:	6825      	ldr	r5, [r4, #0]
 80042a0:	6961      	ldr	r1, [r4, #20]
 80042a2:	1d18      	adds	r0, r3, #4
 80042a4:	6030      	str	r0, [r6, #0]
 80042a6:	062e      	lsls	r6, r5, #24
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	d501      	bpl.n	80042b0 <_printf_i+0x1c0>
 80042ac:	6019      	str	r1, [r3, #0]
 80042ae:	e002      	b.n	80042b6 <_printf_i+0x1c6>
 80042b0:	0668      	lsls	r0, r5, #25
 80042b2:	d5fb      	bpl.n	80042ac <_printf_i+0x1bc>
 80042b4:	8019      	strh	r1, [r3, #0]
 80042b6:	2300      	movs	r3, #0
 80042b8:	6123      	str	r3, [r4, #16]
 80042ba:	4616      	mov	r6, r2
 80042bc:	e7bc      	b.n	8004238 <_printf_i+0x148>
 80042be:	6833      	ldr	r3, [r6, #0]
 80042c0:	1d1a      	adds	r2, r3, #4
 80042c2:	6032      	str	r2, [r6, #0]
 80042c4:	681e      	ldr	r6, [r3, #0]
 80042c6:	6862      	ldr	r2, [r4, #4]
 80042c8:	2100      	movs	r1, #0
 80042ca:	4630      	mov	r0, r6
 80042cc:	f7fb ff88 	bl	80001e0 <memchr>
 80042d0:	b108      	cbz	r0, 80042d6 <_printf_i+0x1e6>
 80042d2:	1b80      	subs	r0, r0, r6
 80042d4:	6060      	str	r0, [r4, #4]
 80042d6:	6863      	ldr	r3, [r4, #4]
 80042d8:	6123      	str	r3, [r4, #16]
 80042da:	2300      	movs	r3, #0
 80042dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80042e0:	e7aa      	b.n	8004238 <_printf_i+0x148>
 80042e2:	6923      	ldr	r3, [r4, #16]
 80042e4:	4632      	mov	r2, r6
 80042e6:	4649      	mov	r1, r9
 80042e8:	4640      	mov	r0, r8
 80042ea:	47d0      	blx	sl
 80042ec:	3001      	adds	r0, #1
 80042ee:	d0ad      	beq.n	800424c <_printf_i+0x15c>
 80042f0:	6823      	ldr	r3, [r4, #0]
 80042f2:	079b      	lsls	r3, r3, #30
 80042f4:	d413      	bmi.n	800431e <_printf_i+0x22e>
 80042f6:	68e0      	ldr	r0, [r4, #12]
 80042f8:	9b03      	ldr	r3, [sp, #12]
 80042fa:	4298      	cmp	r0, r3
 80042fc:	bfb8      	it	lt
 80042fe:	4618      	movlt	r0, r3
 8004300:	e7a6      	b.n	8004250 <_printf_i+0x160>
 8004302:	2301      	movs	r3, #1
 8004304:	4632      	mov	r2, r6
 8004306:	4649      	mov	r1, r9
 8004308:	4640      	mov	r0, r8
 800430a:	47d0      	blx	sl
 800430c:	3001      	adds	r0, #1
 800430e:	d09d      	beq.n	800424c <_printf_i+0x15c>
 8004310:	3501      	adds	r5, #1
 8004312:	68e3      	ldr	r3, [r4, #12]
 8004314:	9903      	ldr	r1, [sp, #12]
 8004316:	1a5b      	subs	r3, r3, r1
 8004318:	42ab      	cmp	r3, r5
 800431a:	dcf2      	bgt.n	8004302 <_printf_i+0x212>
 800431c:	e7eb      	b.n	80042f6 <_printf_i+0x206>
 800431e:	2500      	movs	r5, #0
 8004320:	f104 0619 	add.w	r6, r4, #25
 8004324:	e7f5      	b.n	8004312 <_printf_i+0x222>
 8004326:	bf00      	nop
 8004328:	08004479 	.word	0x08004479
 800432c:	0800448a 	.word	0x0800448a

08004330 <memmove>:
 8004330:	4288      	cmp	r0, r1
 8004332:	b510      	push	{r4, lr}
 8004334:	eb01 0402 	add.w	r4, r1, r2
 8004338:	d902      	bls.n	8004340 <memmove+0x10>
 800433a:	4284      	cmp	r4, r0
 800433c:	4623      	mov	r3, r4
 800433e:	d807      	bhi.n	8004350 <memmove+0x20>
 8004340:	1e43      	subs	r3, r0, #1
 8004342:	42a1      	cmp	r1, r4
 8004344:	d008      	beq.n	8004358 <memmove+0x28>
 8004346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800434a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800434e:	e7f8      	b.n	8004342 <memmove+0x12>
 8004350:	4402      	add	r2, r0
 8004352:	4601      	mov	r1, r0
 8004354:	428a      	cmp	r2, r1
 8004356:	d100      	bne.n	800435a <memmove+0x2a>
 8004358:	bd10      	pop	{r4, pc}
 800435a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800435e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004362:	e7f7      	b.n	8004354 <memmove+0x24>

08004364 <_sbrk_r>:
 8004364:	b538      	push	{r3, r4, r5, lr}
 8004366:	4d06      	ldr	r5, [pc, #24]	@ (8004380 <_sbrk_r+0x1c>)
 8004368:	2300      	movs	r3, #0
 800436a:	4604      	mov	r4, r0
 800436c:	4608      	mov	r0, r1
 800436e:	602b      	str	r3, [r5, #0]
 8004370:	f7fd fa5c 	bl	800182c <_sbrk>
 8004374:	1c43      	adds	r3, r0, #1
 8004376:	d102      	bne.n	800437e <_sbrk_r+0x1a>
 8004378:	682b      	ldr	r3, [r5, #0]
 800437a:	b103      	cbz	r3, 800437e <_sbrk_r+0x1a>
 800437c:	6023      	str	r3, [r4, #0]
 800437e:	bd38      	pop	{r3, r4, r5, pc}
 8004380:	20000278 	.word	0x20000278

08004384 <memcpy>:
 8004384:	440a      	add	r2, r1
 8004386:	4291      	cmp	r1, r2
 8004388:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800438c:	d100      	bne.n	8004390 <memcpy+0xc>
 800438e:	4770      	bx	lr
 8004390:	b510      	push	{r4, lr}
 8004392:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004396:	f803 4f01 	strb.w	r4, [r3, #1]!
 800439a:	4291      	cmp	r1, r2
 800439c:	d1f9      	bne.n	8004392 <memcpy+0xe>
 800439e:	bd10      	pop	{r4, pc}

080043a0 <_realloc_r>:
 80043a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043a4:	4680      	mov	r8, r0
 80043a6:	4615      	mov	r5, r2
 80043a8:	460c      	mov	r4, r1
 80043aa:	b921      	cbnz	r1, 80043b6 <_realloc_r+0x16>
 80043ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043b0:	4611      	mov	r1, r2
 80043b2:	f7ff bc4b 	b.w	8003c4c <_malloc_r>
 80043b6:	b92a      	cbnz	r2, 80043c4 <_realloc_r+0x24>
 80043b8:	f7ff fbdc 	bl	8003b74 <_free_r>
 80043bc:	2400      	movs	r4, #0
 80043be:	4620      	mov	r0, r4
 80043c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043c4:	f000 f81a 	bl	80043fc <_malloc_usable_size_r>
 80043c8:	4285      	cmp	r5, r0
 80043ca:	4606      	mov	r6, r0
 80043cc:	d802      	bhi.n	80043d4 <_realloc_r+0x34>
 80043ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80043d2:	d8f4      	bhi.n	80043be <_realloc_r+0x1e>
 80043d4:	4629      	mov	r1, r5
 80043d6:	4640      	mov	r0, r8
 80043d8:	f7ff fc38 	bl	8003c4c <_malloc_r>
 80043dc:	4607      	mov	r7, r0
 80043de:	2800      	cmp	r0, #0
 80043e0:	d0ec      	beq.n	80043bc <_realloc_r+0x1c>
 80043e2:	42b5      	cmp	r5, r6
 80043e4:	462a      	mov	r2, r5
 80043e6:	4621      	mov	r1, r4
 80043e8:	bf28      	it	cs
 80043ea:	4632      	movcs	r2, r6
 80043ec:	f7ff ffca 	bl	8004384 <memcpy>
 80043f0:	4621      	mov	r1, r4
 80043f2:	4640      	mov	r0, r8
 80043f4:	f7ff fbbe 	bl	8003b74 <_free_r>
 80043f8:	463c      	mov	r4, r7
 80043fa:	e7e0      	b.n	80043be <_realloc_r+0x1e>

080043fc <_malloc_usable_size_r>:
 80043fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004400:	1f18      	subs	r0, r3, #4
 8004402:	2b00      	cmp	r3, #0
 8004404:	bfbc      	itt	lt
 8004406:	580b      	ldrlt	r3, [r1, r0]
 8004408:	18c0      	addlt	r0, r0, r3
 800440a:	4770      	bx	lr

0800440c <_init>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	bf00      	nop
 8004410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004412:	bc08      	pop	{r3}
 8004414:	469e      	mov	lr, r3
 8004416:	4770      	bx	lr

08004418 <_fini>:
 8004418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441a:	bf00      	nop
 800441c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800441e:	bc08      	pop	{r3}
 8004420:	469e      	mov	lr, r3
 8004422:	4770      	bx	lr
